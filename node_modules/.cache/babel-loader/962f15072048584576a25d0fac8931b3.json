{"ast":null,"code":"/**\n * Check that Assembly parameters are present and include all required fields.\n */\nfunction validateParams(params) {\n  if (!params) {\n    throw new Error('Transloadit: The `params` option is required.');\n  }\n  if (typeof params === 'string') {\n    try {\n      params = JSON.parse(params);\n    } catch (err) {\n      // Tell the user that this is not an Uppy bug!\n      err.message = \"Transloadit: The `params` option is a malformed JSON string: \" + err.message;\n      throw err;\n    }\n  }\n  if (!params.auth || !params.auth.key) {\n    throw new Error('Transloadit: The `params.auth.key` option is required. ' + 'You can find your Transloadit API key at https://transloadit.com/account/api-settings.');\n  }\n}\n/**\n * Turn Transloadit plugin options and a list of files into a list of Assembly\n * options.\n */\n\nvar AssemblyOptions = /*#__PURE__*/function () {\n  function AssemblyOptions(files, opts) {\n    this.files = files;\n    this.opts = opts;\n  }\n  /**\n   * Normalize Uppy-specific Assembly option features to a Transloadit-\n   * compatible object.\n   */\n\n  var _proto = AssemblyOptions.prototype;\n  _proto._normalizeAssemblyOptions = function _normalizeAssemblyOptions(file, assemblyOptions) {\n    if (Array.isArray(assemblyOptions.fields)) {\n      var fieldNames = assemblyOptions.fields;\n      assemblyOptions.fields = {};\n      fieldNames.forEach(function (fieldName) {\n        assemblyOptions.fields[fieldName] = file.meta[fieldName];\n      });\n    }\n    if (!assemblyOptions.fields) {\n      assemblyOptions.fields = {};\n    }\n    return assemblyOptions;\n  }\n  /**\n   * Get Assembly options for a file.\n   */;\n\n  _proto._getAssemblyOptions = function _getAssemblyOptions(file) {\n    var _this = this;\n    var options = this.opts;\n    return Promise.resolve().then(function () {\n      return options.getAssemblyOptions(file, options);\n    }).then(function (assemblyOptions) {\n      return _this._normalizeAssemblyOptions(file, assemblyOptions);\n    }).then(function (assemblyOptions) {\n      validateParams(assemblyOptions.params);\n      return {\n        fileIDs: [file.id],\n        options: assemblyOptions\n      };\n    });\n  }\n  /**\n   * Combine Assemblies with the same options into a single Assembly for all the\n   * relevant files.\n   */;\n\n  _proto._dedupe = function _dedupe(list) {\n    var dedupeMap = Object.create(null);\n    list.forEach(function (_ref) {\n      var fileIDs = _ref.fileIDs,\n        options = _ref.options;\n      var id = JSON.stringify(options);\n      if (dedupeMap[id]) {\n        var _dedupeMap$id$fileIDs;\n        (_dedupeMap$id$fileIDs = dedupeMap[id].fileIDs).push.apply(_dedupeMap$id$fileIDs, fileIDs);\n      } else {\n        dedupeMap[id] = {\n          options: options,\n          fileIDs: [].concat(fileIDs)\n        };\n      }\n    });\n    return Object.keys(dedupeMap).map(function (id) {\n      return dedupeMap[id];\n    });\n  }\n  /**\n   * Generate a set of Assemblies that will handle the upload.\n   * Returns a Promise for an object with keys:\n   *  - fileIDs - an array of file IDs to add to this Assembly\n   *  - options - Assembly options\n   */;\n\n  _proto.build = function build() {\n    var _this2 = this;\n    var options = this.opts;\n    if (this.files.length > 0) {\n      return Promise.all(this.files.map(function (file) {\n        return _this2._getAssemblyOptions(file);\n      })).then(function (list) {\n        return _this2._dedupe(list);\n      });\n    }\n    if (options.alwaysRunAssembly) {\n      // No files, just generate one Assembly\n      return Promise.resolve(options.getAssemblyOptions(null, options)).then(function (assemblyOptions) {\n        validateParams(assemblyOptions.params);\n        return [{\n          fileIDs: _this2.files.map(function (file) {\n            return file.id;\n          }),\n          options: assemblyOptions\n        }];\n      });\n    } // If there are no files and we do not `alwaysRunAssembly`,\n    // don't do anything.\n\n    return Promise.resolve([]);\n  };\n  return AssemblyOptions;\n}();\nmodule.exports = AssemblyOptions;\nmodule.exports.validateParams = validateParams;","map":{"version":3,"names":["validateParams","params","Error","JSON","parse","err","message","auth","key","AssemblyOptions","files","opts","_proto","prototype","_normalizeAssemblyOptions","file","assemblyOptions","Array","isArray","fields","fieldNames","forEach","fieldName","meta","_getAssemblyOptions","_this","options","Promise","resolve","then","getAssemblyOptions","fileIDs","id","_dedupe","list","dedupeMap","Object","create","_ref","stringify","_dedupeMap$id$fileIDs","push","apply","concat","keys","map","build","_this2","length","all","alwaysRunAssembly","module","exports"],"sources":["E:/integrate cloud/uppy/node_modules/@uppy/transloadit/lib/AssemblyOptions.js"],"sourcesContent":["/**\n * Check that Assembly parameters are present and include all required fields.\n */\nfunction validateParams(params) {\n  if (!params) {\n    throw new Error('Transloadit: The `params` option is required.');\n  }\n\n  if (typeof params === 'string') {\n    try {\n      params = JSON.parse(params);\n    } catch (err) {\n      // Tell the user that this is not an Uppy bug!\n      err.message = \"Transloadit: The `params` option is a malformed JSON string: \" + err.message;\n      throw err;\n    }\n  }\n\n  if (!params.auth || !params.auth.key) {\n    throw new Error('Transloadit: The `params.auth.key` option is required. ' + 'You can find your Transloadit API key at https://transloadit.com/account/api-settings.');\n  }\n}\n/**\n * Turn Transloadit plugin options and a list of files into a list of Assembly\n * options.\n */\n\n\nvar AssemblyOptions = /*#__PURE__*/function () {\n  function AssemblyOptions(files, opts) {\n    this.files = files;\n    this.opts = opts;\n  }\n  /**\n   * Normalize Uppy-specific Assembly option features to a Transloadit-\n   * compatible object.\n   */\n\n\n  var _proto = AssemblyOptions.prototype;\n\n  _proto._normalizeAssemblyOptions = function _normalizeAssemblyOptions(file, assemblyOptions) {\n    if (Array.isArray(assemblyOptions.fields)) {\n      var fieldNames = assemblyOptions.fields;\n      assemblyOptions.fields = {};\n      fieldNames.forEach(function (fieldName) {\n        assemblyOptions.fields[fieldName] = file.meta[fieldName];\n      });\n    }\n\n    if (!assemblyOptions.fields) {\n      assemblyOptions.fields = {};\n    }\n\n    return assemblyOptions;\n  }\n  /**\n   * Get Assembly options for a file.\n   */\n  ;\n\n  _proto._getAssemblyOptions = function _getAssemblyOptions(file) {\n    var _this = this;\n\n    var options = this.opts;\n    return Promise.resolve().then(function () {\n      return options.getAssemblyOptions(file, options);\n    }).then(function (assemblyOptions) {\n      return _this._normalizeAssemblyOptions(file, assemblyOptions);\n    }).then(function (assemblyOptions) {\n      validateParams(assemblyOptions.params);\n      return {\n        fileIDs: [file.id],\n        options: assemblyOptions\n      };\n    });\n  }\n  /**\n   * Combine Assemblies with the same options into a single Assembly for all the\n   * relevant files.\n   */\n  ;\n\n  _proto._dedupe = function _dedupe(list) {\n    var dedupeMap = Object.create(null);\n    list.forEach(function (_ref) {\n      var fileIDs = _ref.fileIDs,\n          options = _ref.options;\n      var id = JSON.stringify(options);\n\n      if (dedupeMap[id]) {\n        var _dedupeMap$id$fileIDs;\n\n        (_dedupeMap$id$fileIDs = dedupeMap[id].fileIDs).push.apply(_dedupeMap$id$fileIDs, fileIDs);\n      } else {\n        dedupeMap[id] = {\n          options: options,\n          fileIDs: [].concat(fileIDs)\n        };\n      }\n    });\n    return Object.keys(dedupeMap).map(function (id) {\n      return dedupeMap[id];\n    });\n  }\n  /**\n   * Generate a set of Assemblies that will handle the upload.\n   * Returns a Promise for an object with keys:\n   *  - fileIDs - an array of file IDs to add to this Assembly\n   *  - options - Assembly options\n   */\n  ;\n\n  _proto.build = function build() {\n    var _this2 = this;\n\n    var options = this.opts;\n\n    if (this.files.length > 0) {\n      return Promise.all(this.files.map(function (file) {\n        return _this2._getAssemblyOptions(file);\n      })).then(function (list) {\n        return _this2._dedupe(list);\n      });\n    }\n\n    if (options.alwaysRunAssembly) {\n      // No files, just generate one Assembly\n      return Promise.resolve(options.getAssemblyOptions(null, options)).then(function (assemblyOptions) {\n        validateParams(assemblyOptions.params);\n        return [{\n          fileIDs: _this2.files.map(function (file) {\n            return file.id;\n          }),\n          options: assemblyOptions\n        }];\n      });\n    } // If there are no files and we do not `alwaysRunAssembly`,\n    // don't do anything.\n\n\n    return Promise.resolve([]);\n  };\n\n  return AssemblyOptions;\n}();\n\nmodule.exports = AssemblyOptions;\nmodule.exports.validateParams = validateParams;"],"mappings":"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"},"metadata":{},"sourceType":"script"}