{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport isReactNative from './isReactNative';\nimport uriToBlob from './uriToBlob';\nimport FileSource from './sources/FileSource';\nimport StreamSource from './sources/StreamSource';\nvar FileReader = /*#__PURE__*/function () {\n  function FileReader() {\n    _classCallCheck(this, FileReader);\n  }\n  _createClass(FileReader, [{\n    key: \"openFile\",\n    value: function openFile(input, chunkSize) {\n      // In React Native, when user selects a file, instead of a File or Blob,\n      // you usually get a file object {} with a uri property that contains\n      // a local path to the file. We use XMLHttpRequest to fetch\n      // the file blob, before uploading with tus.\n      if (isReactNative() && input && typeof input.uri !== 'undefined') {\n        return uriToBlob(input.uri).then(function (blob) {\n          return new FileSource(blob);\n        })[\"catch\"](function (err) {\n          throw new Error(\"tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. \".concat(err));\n        });\n      } // Since we emulate the Blob type in our tests (not all target browsers\n      // support it), we cannot use `instanceof` for testing whether the input value\n      // can be handled. Instead, we simply check is the slice() function and the\n      // size property are available.\n\n      if (typeof input.slice === 'function' && typeof input.size !== 'undefined') {\n        return Promise.resolve(new FileSource(input));\n      }\n      if (typeof input.read === 'function') {\n        chunkSize = +chunkSize;\n        if (!isFinite(chunkSize)) {\n          return Promise.reject(new Error('cannot create source for stream without a finite value for the `chunkSize` option'));\n        }\n        return Promise.resolve(new StreamSource(input, chunkSize));\n      }\n      return Promise.reject(new Error('source object may only be an instance of File, Blob, or Reader in this environment'));\n    }\n  }]);\n  return FileReader;\n}();\nexport { FileReader as default };","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","isReactNative","uriToBlob","FileSource","StreamSource","FileReader","value","openFile","input","chunkSize","uri","then","blob","err","Error","concat","slice","size","Promise","resolve","read","isFinite","reject","default"],"sources":["E:/integrate cloud/uppy/node_modules/tus-js-client/lib.esm/browser/fileReader.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport isReactNative from './isReactNative';\nimport uriToBlob from './uriToBlob';\nimport FileSource from './sources/FileSource';\nimport StreamSource from './sources/StreamSource';\n\nvar FileReader = /*#__PURE__*/function () {\n  function FileReader() {\n    _classCallCheck(this, FileReader);\n  }\n\n  _createClass(FileReader, [{\n    key: \"openFile\",\n    value: function openFile(input, chunkSize) {\n      // In React Native, when user selects a file, instead of a File or Blob,\n      // you usually get a file object {} with a uri property that contains\n      // a local path to the file. We use XMLHttpRequest to fetch\n      // the file blob, before uploading with tus.\n      if (isReactNative() && input && typeof input.uri !== 'undefined') {\n        return uriToBlob(input.uri).then(function (blob) {\n          return new FileSource(blob);\n        })[\"catch\"](function (err) {\n          throw new Error(\"tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. \".concat(err));\n        });\n      } // Since we emulate the Blob type in our tests (not all target browsers\n      // support it), we cannot use `instanceof` for testing whether the input value\n      // can be handled. Instead, we simply check is the slice() function and the\n      // size property are available.\n\n\n      if (typeof input.slice === 'function' && typeof input.size !== 'undefined') {\n        return Promise.resolve(new FileSource(input));\n      }\n\n      if (typeof input.read === 'function') {\n        chunkSize = +chunkSize;\n\n        if (!isFinite(chunkSize)) {\n          return Promise.reject(new Error('cannot create source for stream without a finite value for the `chunkSize` option'));\n        }\n\n        return Promise.resolve(new StreamSource(input, chunkSize));\n      }\n\n      return Promise.reject(new Error('source object may only be an instance of File, Blob, or Reader in this environment'));\n    }\n  }]);\n\n  return FileReader;\n}();\n\nexport { FileReader as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}