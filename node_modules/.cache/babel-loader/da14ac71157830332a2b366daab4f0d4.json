{"ast":null,"code":"/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nmodule.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  var onSuccess = _ref.onSuccess;\n  directoryReader.readEntries(function (entries) {\n    var newEntries = [].concat(oldEntries, entries); // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory() must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      setTimeout(function () {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess: onSuccess\n        });\n      }, 0); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  },\n  // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  function (error) {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n};","map":{"version":3,"names":["module","exports","getFilesAndDirectoriesFromDirectory","directoryReader","oldEntries","logDropError","_ref","onSuccess","readEntries","entries","newEntries","concat","length","setTimeout","error"],"sources":["E:/integrate cloud/uppy/node_modules/@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/getFilesAndDirectoriesFromDirectory.js"],"sourcesContent":["/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nmodule.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  var onSuccess = _ref.onSuccess;\n  directoryReader.readEntries(function (entries) {\n    var newEntries = [].concat(oldEntries, entries); // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory() must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      setTimeout(function () {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess: onSuccess\n        });\n      }, 0); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  function (error) {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,SAASC,mCAAmCA,CAACC,eAAe,EAAEC,UAAU,EAAEC,YAAY,EAAEC,IAAI,EAAE;EAC7G,IAAIC,SAAS,GAAGD,IAAI,CAACC,SAAS;EAC9BJ,eAAe,CAACK,WAAW,CAAC,UAAUC,OAAO,EAAE;IAC7C,IAAIC,UAAU,GAAG,EAAE,CAACC,MAAM,CAACP,UAAU,EAAEK,OAAO,CAAC,CAAC,CAAC;;IAEjD,IAAIA,OAAO,CAACG,MAAM,EAAE;MAClBC,UAAU,CAAC,YAAY;QACrBX,mCAAmC,CAACC,eAAe,EAAEO,UAAU,EAAEL,YAAY,EAAE;UAC7EE,SAAS,EAAEA;QACb,CAAC,CAAC;MACJ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,MAAM;MACLA,SAAS,CAACG,UAAU,CAAC;IACvB;EACF,CAAC;EAAE;EACH,UAAUI,KAAK,EAAE;IACfT,YAAY,CAACS,KAAK,CAAC;IACnBP,SAAS,CAACH,UAAU,CAAC;EACvB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}