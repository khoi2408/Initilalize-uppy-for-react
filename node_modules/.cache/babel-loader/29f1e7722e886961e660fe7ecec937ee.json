{"ast":null,"code":"function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar Emitter = require('component-emitter');\n/**\n * Track completion of multiple assemblies.\n *\n * Emits 'assembly-complete' when an assembly completes.\n * Emits 'assembly-error' when an assembly fails.\n * Exposes a `.promise` property that resolves when all assemblies have\n * completed (or failed).\n */\n\nvar TransloaditAssemblyWatcher = /*#__PURE__*/function (_Emitter) {\n  _inheritsLoose(TransloaditAssemblyWatcher, _Emitter);\n  function TransloaditAssemblyWatcher(uppy, assemblyIDs) {\n    var _this;\n    _this = _Emitter.call(this) || this;\n    _this._uppy = uppy;\n    _this._assemblyIDs = assemblyIDs;\n    _this._remaining = assemblyIDs.length;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n    _this._onAssemblyComplete = _this._onAssemblyComplete.bind(_assertThisInitialized(_this));\n    _this._onAssemblyCancel = _this._onAssemblyCancel.bind(_assertThisInitialized(_this));\n    _this._onAssemblyError = _this._onAssemblyError.bind(_assertThisInitialized(_this));\n    _this._onImportError = _this._onImportError.bind(_assertThisInitialized(_this));\n    _this._addListeners();\n    return _this;\n  }\n  /**\n   * Are we watching this assembly ID?\n   */\n\n  var _proto = TransloaditAssemblyWatcher.prototype;\n  _proto._watching = function _watching(id) {\n    return this._assemblyIDs.indexOf(id) !== -1;\n  };\n  _proto._onAssemblyComplete = function _onAssemblyComplete(assembly) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n    this._uppy.log(\"[Transloadit] AssemblyWatcher: Got Assembly finish \" + assembly.assembly_id);\n    this.emit('assembly-complete', assembly.assembly_id);\n    this._checkAllComplete();\n  };\n  _proto._onAssemblyCancel = function _onAssemblyCancel(assembly) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n    this._checkAllComplete();\n  };\n  _proto._onAssemblyError = function _onAssemblyError(assembly, error) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n    this._uppy.log(\"[Transloadit] AssemblyWatcher: Got Assembly error \" + assembly.assembly_id);\n    this._uppy.log(error);\n    this.emit('assembly-error', assembly.assembly_id, error);\n    this._checkAllComplete();\n  };\n  _proto._onImportError = function _onImportError(assembly, fileID, error) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    } // Not sure if we should be doing something when it's just one file failing.\n    // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n    // I think failing the upload is better than silently ignoring.\n    // In the future we should maybe have a way to resolve uploads with some failures,\n    // like returning an object with `{ successful, failed }` uploads.\n\n    this._onAssemblyError(assembly, error);\n  };\n  _proto._checkAllComplete = function _checkAllComplete() {\n    this._remaining -= 1;\n    if (this._remaining === 0) {\n      // We're done, these listeners can be removed\n      this._removeListeners();\n      this._resolve();\n    }\n  };\n  _proto._removeListeners = function _removeListeners() {\n    this._uppy.off('transloadit:complete', this._onAssemblyComplete);\n    this._uppy.off('transloadit:assembly-cancel', this._onAssemblyCancel);\n    this._uppy.off('transloadit:assembly-error', this._onAssemblyError);\n    this._uppy.off('transloadit:import-error', this._onImportError);\n  };\n  _proto._addListeners = function _addListeners() {\n    this._uppy.on('transloadit:complete', this._onAssemblyComplete);\n    this._uppy.on('transloadit:assembly-cancel', this._onAssemblyCancel);\n    this._uppy.on('transloadit:assembly-error', this._onAssemblyError);\n    this._uppy.on('transloadit:import-error', this._onImportError);\n  };\n  return TransloaditAssemblyWatcher;\n}(Emitter);\nmodule.exports = TransloaditAssemblyWatcher;","map":{"version":3,"names":["_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","Emitter","require","TransloaditAssemblyWatcher","_Emitter","uppy","assemblyIDs","_this","call","_uppy","_assemblyIDs","_remaining","length","promise","Promise","resolve","reject","_resolve","_reject","_onAssemblyComplete","bind","_onAssemblyCancel","_onAssemblyError","_onImportError","_addListeners","_proto","_watching","id","indexOf","assembly","assembly_id","log","emit","_checkAllComplete","error","fileID","_removeListeners","off","on","module","exports"],"sources":["E:/integrate cloud/uppy/node_modules/@uppy/transloadit/lib/AssemblyWatcher.js"],"sourcesContent":["function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Emitter = require('component-emitter');\n/**\n * Track completion of multiple assemblies.\n *\n * Emits 'assembly-complete' when an assembly completes.\n * Emits 'assembly-error' when an assembly fails.\n * Exposes a `.promise` property that resolves when all assemblies have\n * completed (or failed).\n */\n\n\nvar TransloaditAssemblyWatcher = /*#__PURE__*/function (_Emitter) {\n  _inheritsLoose(TransloaditAssemblyWatcher, _Emitter);\n\n  function TransloaditAssemblyWatcher(uppy, assemblyIDs) {\n    var _this;\n\n    _this = _Emitter.call(this) || this;\n    _this._uppy = uppy;\n    _this._assemblyIDs = assemblyIDs;\n    _this._remaining = assemblyIDs.length;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n    _this._onAssemblyComplete = _this._onAssemblyComplete.bind(_assertThisInitialized(_this));\n    _this._onAssemblyCancel = _this._onAssemblyCancel.bind(_assertThisInitialized(_this));\n    _this._onAssemblyError = _this._onAssemblyError.bind(_assertThisInitialized(_this));\n    _this._onImportError = _this._onImportError.bind(_assertThisInitialized(_this));\n\n    _this._addListeners();\n\n    return _this;\n  }\n  /**\n   * Are we watching this assembly ID?\n   */\n\n\n  var _proto = TransloaditAssemblyWatcher.prototype;\n\n  _proto._watching = function _watching(id) {\n    return this._assemblyIDs.indexOf(id) !== -1;\n  };\n\n  _proto._onAssemblyComplete = function _onAssemblyComplete(assembly) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n\n    this._uppy.log(\"[Transloadit] AssemblyWatcher: Got Assembly finish \" + assembly.assembly_id);\n\n    this.emit('assembly-complete', assembly.assembly_id);\n\n    this._checkAllComplete();\n  };\n\n  _proto._onAssemblyCancel = function _onAssemblyCancel(assembly) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n\n    this._checkAllComplete();\n  };\n\n  _proto._onAssemblyError = function _onAssemblyError(assembly, error) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    }\n\n    this._uppy.log(\"[Transloadit] AssemblyWatcher: Got Assembly error \" + assembly.assembly_id);\n\n    this._uppy.log(error);\n\n    this.emit('assembly-error', assembly.assembly_id, error);\n\n    this._checkAllComplete();\n  };\n\n  _proto._onImportError = function _onImportError(assembly, fileID, error) {\n    if (!this._watching(assembly.assembly_id)) {\n      return;\n    } // Not sure if we should be doing something when it's just one file failing.\n    // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n    // I think failing the upload is better than silently ignoring.\n    // In the future we should maybe have a way to resolve uploads with some failures,\n    // like returning an object with `{ successful, failed }` uploads.\n\n\n    this._onAssemblyError(assembly, error);\n  };\n\n  _proto._checkAllComplete = function _checkAllComplete() {\n    this._remaining -= 1;\n\n    if (this._remaining === 0) {\n      // We're done, these listeners can be removed\n      this._removeListeners();\n\n      this._resolve();\n    }\n  };\n\n  _proto._removeListeners = function _removeListeners() {\n    this._uppy.off('transloadit:complete', this._onAssemblyComplete);\n\n    this._uppy.off('transloadit:assembly-cancel', this._onAssemblyCancel);\n\n    this._uppy.off('transloadit:assembly-error', this._onAssemblyError);\n\n    this._uppy.off('transloadit:import-error', this._onImportError);\n  };\n\n  _proto._addListeners = function _addListeners() {\n    this._uppy.on('transloadit:complete', this._onAssemblyComplete);\n\n    this._uppy.on('transloadit:assembly-cancel', this._onAssemblyCancel);\n\n    this._uppy.on('transloadit:assembly-error', this._onAssemblyError);\n\n    this._uppy.on('transloadit:import-error', this._onImportError);\n  };\n\n  return TransloaditAssemblyWatcher;\n}(Emitter);\n\nmodule.exports = TransloaditAssemblyWatcher;"],"mappings":"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"},"metadata":{},"sourceType":"script"}