{"ast":null,"code":"var _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar Translator = require('@uppy/utils/lib/Translator');\nvar hasProperty = require('@uppy/utils/lib/hasProperty');\nvar _require = require('@uppy/core'),\n  Plugin = _require.Plugin;\nvar Tus = require('@uppy/tus');\nvar Assembly = require('./Assembly');\nvar Client = require('./Client');\nvar AssemblyOptions = require('./AssemblyOptions');\nvar AssemblyWatcher = require('./AssemblyWatcher');\nfunction defaultGetAssemblyOptions(file, options) {\n  return {\n    params: options.params,\n    signature: options.signature,\n    fields: options.fields\n  };\n}\nvar COMPANION = 'https://api2.transloadit.com/companion'; // Regex matching acceptable postMessage() origins for authentication feedback from companion.\n\nvar ALLOWED_COMPANION_PATTERN = /\\.transloadit\\.com$/; // Regex used to check if a Companion address is run by Transloadit.\n\nvar TL_COMPANION = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/companion/;\nvar TL_UPPY_SERVER = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/uppy-server/;\n/**\n * Upload files to Transloadit using Tus.\n */\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(Transloadit, _Plugin);\n  function Transloadit(uppy, opts) {\n    var _this;\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.type = 'uploader';\n    _this.id = _this.opts.id || 'Transloadit';\n    _this.title = 'Transloadit';\n    _this.defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create Assembly',\n        encoding: 'Encoding...'\n      }\n    };\n    var defaultOptions = {\n      service: 'https://api2.transloadit.com',\n      errorReporting: true,\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false,\n      importFromUploadURLs: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions: defaultGetAssemblyOptions,\n      limit: 0\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.i18nInit();\n    _this._prepareUpload = _this._prepareUpload.bind(_assertThisInitialized(_this));\n    _this._afterUpload = _this._afterUpload.bind(_assertThisInitialized(_this));\n    _this._onError = _this._onError.bind(_assertThisInitialized(_this));\n    _this._onTusError = _this._onTusError.bind(_assertThisInitialized(_this));\n    _this._onCancelAll = _this._onCancelAll.bind(_assertThisInitialized(_this));\n    _this._onFileUploadURLAvailable = _this._onFileUploadURLAvailable.bind(_assertThisInitialized(_this));\n    _this._onRestored = _this._onRestored.bind(_assertThisInitialized(_this));\n    _this._getPersistentData = _this._getPersistentData.bind(_assertThisInitialized(_this));\n    var hasCustomAssemblyOptions = _this.opts.getAssemblyOptions !== defaultOptions.getAssemblyOptions;\n    if (_this.opts.params) {\n      AssemblyOptions.validateParams(_this.opts.params);\n    } else if (!hasCustomAssemblyOptions) {\n      // Throw the same error that we'd throw if the `params` returned from a\n      // `getAssemblyOptions()` function is null.\n      AssemblyOptions.validateParams(null);\n    }\n    _this.client = new Client({\n      service: _this.opts.service,\n      client: _this._getClientVersion(),\n      errorReporting: _this.opts.errorReporting\n    }); // Contains Assembly instances for in-progress Assemblies.\n\n    _this.activeAssemblies = {}; // Contains a mapping of uploadID to AssemblyWatcher\n\n    _this.assemblyWatchers = {}; // Contains a file IDs that have completed postprocessing before the upload they belong to has entered the postprocess stage.\n\n    _this.completedFiles = Object.create(null);\n    return _this;\n  }\n  var _proto = Transloadit.prototype;\n  _proto.setOptions = function setOptions(newOpts) {\n    _Plugin.prototype.setOptions.call(this, newOpts);\n    this.i18nInit();\n  };\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = this.translator.translate.bind(this.translator);\n    this.i18nArray = this.translator.translateArray.bind(this.translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  };\n\n  _proto._getClientVersion = function _getClientVersion() {\n    var _this2 = this;\n    var list = [\"uppy-core:\" + this.uppy.constructor.VERSION, \"uppy-transloadit:\" + this.constructor.VERSION, \"uppy-tus:\" + Tus.VERSION];\n    var addPluginVersion = function addPluginVersion(pluginName, versionName) {\n      var plugin = _this2.uppy.getPlugin(pluginName);\n      if (plugin) {\n        list.push(versionName + \":\" + plugin.constructor.VERSION);\n      }\n    };\n    if (this.opts.importFromUploadURLs) {\n      addPluginVersion('XHRUpload', 'uppy-xhr-upload');\n      addPluginVersion('AwsS3', 'uppy-aws-s3');\n      addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart');\n    }\n    addPluginVersion('Dropbox', 'uppy-dropbox');\n    addPluginVersion('Box', 'uppy-box');\n    addPluginVersion('Facebook', 'uppy-facebook');\n    addPluginVersion('GoogleDrive', 'uppy-google-drive');\n    addPluginVersion('Instagram', 'uppy-instagram');\n    addPluginVersion('OneDrive', 'uppy-onedrive');\n    addPluginVersion('Zoom', 'uppy-zoom');\n    addPluginVersion('Url', 'uppy-url');\n    return list.join(',');\n  }\n  /**\n   * Attach metadata to files to configure the Tus plugin to upload to Transloadit.\n   * Also use Transloadit's Companion\n   *\n   * See: https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n   *\n   * @param {object} file\n   * @param {object} status\n   */;\n\n  _proto._attachAssemblyMetadata = function _attachAssemblyMetadata(file, status) {\n    // Add the metadata parameters Transloadit needs.\n    var meta = _extends({}, file.meta, {\n      assembly_url: status.assembly_url,\n      filename: file.name,\n      fieldname: 'file'\n    }); // Add Assembly-specific Tus endpoint.\n\n    var tus = _extends({}, file.tus, {\n      endpoint: status.tus_url,\n      // Include X-Request-ID headers for better debugging.\n      addRequestId: true\n    }); // Set Companion location. We only add this, if 'file' has the attribute\n    // remote, because this is the criteria to identify remote files.\n    // We only replace the hostname for Transloadit's companions, so that\n    // people can also self-host them while still using Transloadit for encoding.\n\n    var remote = file.remote;\n    if (file.remote && TL_UPPY_SERVER.test(file.remote.companionUrl)) {\n      var err = new Error('The https://api2.transloadit.com/uppy-server endpoint was renamed to ' + 'https://api2.transloadit.com/companion, please update your `companionUrl` ' + 'options accordingly.'); // Explicitly log this error here because it is caught by the `createAssembly`\n      // Promise further along.\n      // That's fine, but createAssembly only shows the informer, we need something a\n      // little more noisy.\n\n      this.uppy.log(err);\n      throw err;\n    }\n    if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {\n      var newHost = status.companion_url.replace(/\\/$/, '');\n      var path = file.remote.url.replace(file.remote.companionUrl, '').replace(/^\\//, '');\n      remote = _extends({}, file.remote, {\n        companionUrl: newHost,\n        url: newHost + \"/\" + path\n      });\n    } // Store the Assembly ID this file is in on the file under the `transloadit` key.\n\n    var newFile = _extends({}, file, {\n      transloadit: {\n        assembly: status.assembly_id\n      }\n    }); // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n\n    if (!this.opts.importFromUploadURLs) {\n      _extends(newFile, {\n        meta: meta,\n        tus: tus,\n        remote: remote\n      });\n    }\n    return newFile;\n  };\n  _proto._createAssembly = function _createAssembly(fileIDs, uploadID, options) {\n    var _this3 = this;\n    this.uppy.log('[Transloadit] Create Assembly');\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature\n    }).then(function (newAssembly) {\n      var _extends2, _extends3;\n      var assembly = new Assembly(newAssembly);\n      var status = assembly.status;\n      var assemblyID = status.assembly_id;\n      var _this3$getPluginState = _this3.getPluginState(),\n        assemblies = _this3$getPluginState.assemblies,\n        uploadsAssemblies = _this3$getPluginState.uploadsAssemblies;\n      _this3.setPluginState({\n        // Store the Assembly status.\n        assemblies: _extends({}, assemblies, (_extends2 = {}, _extends2[assemblyID] = status, _extends2)),\n        // Store the list of Assemblies related to this upload.\n        uploadsAssemblies: _extends({}, uploadsAssemblies, (_extends3 = {}, _extends3[uploadID] = [].concat(uploadsAssemblies[uploadID], [assemblyID]), _extends3))\n      });\n      var _this3$uppy$getState = _this3.uppy.getState(),\n        files = _this3$uppy$getState.files;\n      var updatedFiles = {};\n      fileIDs.forEach(function (id) {\n        updatedFiles[id] = _this3._attachAssemblyMetadata(_this3.uppy.getFile(id), status);\n      });\n      _this3.uppy.setState({\n        files: _extends({}, files, updatedFiles)\n      });\n      _this3.uppy.emit('transloadit:assembly-created', status, fileIDs);\n      _this3.uppy.log(\"[Transloadit] Created Assembly \" + assemblyID);\n      return assembly;\n    }).catch(function (err) {\n      err.message = _this3.i18n('creatingAssemblyFailed') + \": \" + err.message; // Reject the promise.\n\n      throw err;\n    });\n  };\n  _proto._createAssemblyWatcher = function _createAssemblyWatcher(assemblyID, fileIDs, uploadID) {\n    var _this4 = this;\n\n    // AssemblyWatcher tracks completion states of all Assemblies in this upload.\n    var watcher = new AssemblyWatcher(this.uppy, assemblyID);\n    watcher.on('assembly-complete', function (id) {\n      var files = _this4.getAssemblyFiles(id);\n      files.forEach(function (file) {\n        _this4.completedFiles[file.id] = true;\n        _this4.uppy.emit('postprocess-complete', file);\n      });\n    });\n    watcher.on('assembly-error', function (id, error) {\n      // Clear postprocessing state for all our files.\n      var files = _this4.getAssemblyFiles(id);\n      files.forEach(function (file) {\n        // TODO Maybe make a postprocess-error event here?\n        _this4.uppy.emit('upload-error', file, error);\n        _this4.uppy.emit('postprocess-complete', file);\n      });\n    });\n    this.assemblyWatchers[uploadID] = watcher;\n  };\n  _proto._shouldWaitAfterUpload = function _shouldWaitAfterUpload() {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata;\n  }\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the Assembly.\n   */;\n\n  _proto._reserveFiles = function _reserveFiles(assembly, fileIDs) {\n    var _this5 = this;\n    return Promise.all(fileIDs.map(function (fileID) {\n      var file = _this5.uppy.getFile(fileID);\n      return _this5.client.reserveFile(assembly.status, file);\n    }));\n  }\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the Assembly\n   * once they have been fully uploaded.\n   */;\n\n  _proto._onFileUploadURLAvailable = function _onFileUploadURLAvailable(rawFile) {\n    var _this6 = this;\n    var file = this.uppy.getFile(rawFile.id);\n    if (!file || !file.transloadit || !file.transloadit.assembly) {\n      return;\n    }\n    var _this$getPluginState = this.getPluginState(),\n      assemblies = _this$getPluginState.assemblies;\n    var assembly = assemblies[file.transloadit.assembly];\n    this.client.addFile(assembly, file).catch(function (err) {\n      _this6.uppy.log(err);\n      _this6.uppy.emit('transloadit:import-error', assembly, file.id, err);\n    });\n  };\n  _proto._findFile = function _findFile(uploadedFile) {\n    var files = this.uppy.getFiles();\n    for (var i = 0; i < files.length; i++) {\n      var file = files[i]; // Completed file upload.\n\n      if (file.uploadURL === uploadedFile.tus_upload_url) {\n        return file;\n      } // In-progress file upload.\n\n      if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return file;\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (file.name === uploadedFile.name && file.size === uploadedFile.size) {\n          return file;\n        }\n      }\n    }\n  };\n  _proto._onFileUploadComplete = function _onFileUploadComplete(assemblyId, uploadedFile) {\n    var _extends4;\n    var state = this.getPluginState();\n    var file = this._findFile(uploadedFile);\n    if (!file) {\n      this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process');\n      return;\n    }\n    this.setPluginState({\n      files: _extends({}, state.files, (_extends4 = {}, _extends4[uploadedFile.id] = {\n        assembly: assemblyId,\n        id: file.id,\n        uploadedFile: uploadedFile\n      }, _extends4))\n    });\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId));\n  }\n  /**\n   * Callback when a new Assembly result comes in.\n   *\n   * @param {string} assemblyId\n   * @param {string} stepName\n   * @param {object} result\n   */;\n\n  _proto._onResult = function _onResult(assemblyId, stepName, result) {\n    var state = this.getPluginState();\n    var file = state.files[result.original_id]; // The `file` may not exist if an import robot was used instead of a file upload.\n\n    result.localId = file ? file.id : null;\n    var entry = {\n      result: result,\n      stepName: stepName,\n      id: result.id,\n      assembly: assemblyId\n    };\n    this.setPluginState({\n      results: [].concat(state.results, [entry])\n    });\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId));\n  }\n  /**\n   * When an Assembly has finished processing, get the final state\n   * and emit it.\n   *\n   * @param {object} status\n   */;\n\n  _proto._onAssemblyFinished = function _onAssemblyFinished(status) {\n    var _this7 = this;\n    var url = status.assembly_ssl_url;\n    this.client.getAssemblyStatus(url).then(function (finalStatus) {\n      var _extends5;\n      var assemblyId = finalStatus.assembly_id;\n      var state = _this7.getPluginState();\n      _this7.setPluginState({\n        assemblies: _extends({}, state.assemblies, (_extends5 = {}, _extends5[assemblyId] = finalStatus, _extends5))\n      });\n      _this7.uppy.emit('transloadit:complete', finalStatus);\n    });\n  };\n  _proto._cancelAssembly = function _cancelAssembly(assembly) {\n    var _this8 = this;\n    return this.client.cancelAssembly(assembly).then(function () {\n      // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly\n      _this8.uppy.emit('transloadit:assembly-cancelled', assembly);\n    });\n  }\n  /**\n   * When all files are removed, cancel in-progress Assemblies.\n   */;\n\n  _proto._onCancelAll = function _onCancelAll() {\n    var _this9 = this;\n    var _this$getPluginState2 = this.getPluginState(),\n      uploadsAssemblies = _this$getPluginState2.uploadsAssemblies;\n    var assemblyIDs = Object.keys(uploadsAssemblies).reduce(function (acc, uploadID) {\n      acc.push.apply(acc, uploadsAssemblies[uploadID]);\n      return acc;\n    }, []);\n    var cancelPromises = assemblyIDs.map(function (assemblyID) {\n      var assembly = _this9.getAssembly(assemblyID);\n      return _this9._cancelAssembly(assembly);\n    });\n    Promise.all(cancelPromises).catch(function (err) {\n      _this9.uppy.log(err);\n    });\n  }\n  /**\n   * Custom state serialization for the Golden Retriever plugin.\n   * It will pass this back to the `_onRestored` function.\n   *\n   * @param {Function} setData\n   */;\n\n  _proto._getPersistentData = function _getPersistentData(setData) {\n    var _setData;\n    var state = this.getPluginState();\n    var assemblies = state.assemblies;\n    var uploadsAssemblies = state.uploadsAssemblies;\n    setData((_setData = {}, _setData[this.id] = {\n      assemblies: assemblies,\n      uploadsAssemblies: uploadsAssemblies\n    }, _setData));\n  };\n  _proto._onRestored = function _onRestored(pluginData) {\n    var _this10 = this;\n    var savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {};\n    var previousAssemblies = savedState.assemblies || {};\n    var uploadsAssemblies = savedState.uploadsAssemblies || {};\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return;\n    } // Convert loaded Assembly statuses to a Transloadit plugin state object.\n\n    var restoreState = function restoreState(assemblies) {\n      var files = {};\n      var results = [];\n      Object.keys(assemblies).forEach(function (id) {\n        var status = assemblies[id];\n        status.uploads.forEach(function (uploadedFile) {\n          var file = _this10._findFile(uploadedFile);\n          files[uploadedFile.id] = {\n            id: file.id,\n            assembly: id,\n            uploadedFile: uploadedFile\n          };\n        });\n        var state = _this10.getPluginState();\n        Object.keys(status.results).forEach(function (stepName) {\n          status.results[stepName].forEach(function (result) {\n            var file = state.files[result.original_id];\n            result.localId = file ? file.id : null;\n            results.push({\n              id: result.id,\n              result: result,\n              stepName: stepName,\n              assembly: id\n            });\n          });\n        });\n      });\n      _this10.setPluginState({\n        assemblies: assemblies,\n        files: files,\n        results: results,\n        uploadsAssemblies: uploadsAssemblies\n      });\n    }; // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.\n\n    var restoreAssemblies = function restoreAssemblies() {\n      var _this10$getPluginStat = _this10.getPluginState(),\n        assemblies = _this10$getPluginStat.assemblies,\n        uploadsAssemblies = _this10$getPluginStat.uploadsAssemblies; // Set up the assembly watchers again for all the ongoing uploads.\n\n      Object.keys(uploadsAssemblies).forEach(function (uploadID) {\n        var assemblyIDs = uploadsAssemblies[uploadID];\n        var fileIDsInUpload = assemblyIDs.reduce(function (acc, assemblyID) {\n          var fileIDsInAssembly = _this10.getAssemblyFiles(assemblyID).map(function (file) {\n            return file.id;\n          });\n          acc.push.apply(acc, fileIDsInAssembly);\n          return acc;\n        }, []);\n        _this10._createAssemblyWatcher(assemblyIDs, fileIDsInUpload, uploadID);\n      });\n      var allAssemblyIDs = Object.keys(assemblies);\n      allAssemblyIDs.forEach(function (id) {\n        var assembly = new Assembly(assemblies[id]);\n        _this10._connectAssembly(assembly);\n      });\n    }; // Force-update all Assemblies to check for missed events.\n\n    var updateAssemblies = function updateAssemblies() {\n      var _this10$getPluginStat2 = _this10.getPluginState(),\n        assemblies = _this10$getPluginStat2.assemblies;\n      return Promise.all(Object.keys(assemblies).map(function (id) {\n        return _this10.activeAssemblies[id].update();\n      }));\n    }; // Restore all Assembly state.\n\n    this.restored = Promise.resolve().then(function () {\n      restoreState(previousAssemblies);\n      restoreAssemblies();\n      return updateAssemblies();\n    });\n    this.restored.then(function () {\n      _this10.restored = null;\n    });\n  };\n  _proto._connectAssembly = function _connectAssembly(assembly) {\n    var _this11 = this;\n    var status = assembly.status;\n    var id = status.assembly_id;\n    this.activeAssemblies[id] = assembly; // Sync local `assemblies` state\n\n    assembly.on('status', function (newStatus) {\n      var _extends6;\n      var _this11$getPluginStat = _this11.getPluginState(),\n        assemblies = _this11$getPluginStat.assemblies;\n      _this11.setPluginState({\n        assemblies: _extends({}, assemblies, (_extends6 = {}, _extends6[id] = newStatus, _extends6))\n      });\n    });\n    assembly.on('upload', function (file) {\n      _this11._onFileUploadComplete(id, file);\n    });\n    assembly.on('error', function (error) {\n      error.assembly = assembly.status;\n      _this11.uppy.emit('transloadit:assembly-error', assembly.status, error);\n    });\n    assembly.on('executing', function () {\n      _this11.uppy.emit('transloadit:assembly-executing', assembly.status);\n    });\n    if (this.opts.waitForEncoding) {\n      assembly.on('result', function (stepName, result) {\n        _this11._onResult(id, stepName, result);\n      });\n    }\n    if (this.opts.waitForEncoding) {\n      assembly.on('finished', function () {\n        _this11._onAssemblyFinished(assembly.status);\n      });\n    } else if (this.opts.waitForMetadata) {\n      assembly.on('metadata', function () {\n        _this11._onAssemblyFinished(assembly.status);\n      });\n    } // No need to connect to the socket if the Assembly has completed by now.\n\n    if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n      return assembly;\n    } // TODO Do we still need this for anything…?\n    // eslint-disable-next-line no-unused-vars\n\n    var connected = new Promise(function (resolve, reject) {\n      assembly.once('connect', resolve);\n      assembly.once('status', resolve);\n      assembly.once('error', reject);\n    }).then(function () {\n      _this11.uppy.log('[Transloadit] Socket is ready');\n    });\n    assembly.connect();\n    return assembly;\n  };\n  _proto._prepareUpload = function _prepareUpload(fileIDs, uploadID) {\n    var _this12 = this,\n      _extends7;\n\n    // Only use files without errors\n    fileIDs = fileIDs.filter(function (file) {\n      return !file.error;\n    });\n    fileIDs.forEach(function (fileID) {\n      var file = _this12.uppy.getFile(fileID);\n      _this12.uppy.emit('preprocess-progress', file, {\n        mode: 'indeterminate',\n        message: _this12.i18n('creatingAssembly')\n      });\n    });\n    var createAssembly = function createAssembly(_ref) {\n      var fileIDs = _ref.fileIDs,\n        options = _ref.options;\n      var createdAssembly;\n      return _this12._createAssembly(fileIDs, uploadID, options).then(function (assembly) {\n        createdAssembly = assembly;\n        if (_this12.opts.importFromUploadURLs) {\n          return _this12._reserveFiles(assembly, fileIDs);\n        }\n      }).then(function () {\n        fileIDs.forEach(function (fileID) {\n          var file = _this12.uppy.getFile(fileID);\n          _this12.uppy.emit('preprocess-complete', file);\n        });\n        return createdAssembly;\n      }).catch(function (err) {\n        fileIDs.forEach(function (fileID) {\n          var file = _this12.uppy.getFile(fileID); // Clear preprocessing state when the Assembly could not be created,\n          // otherwise the UI gets confused about the lingering progress keys\n\n          _this12.uppy.emit('preprocess-complete', file);\n          _this12.uppy.emit('upload-error', file, err);\n        });\n        throw err;\n      });\n    };\n    var _this$getPluginState3 = this.getPluginState(),\n      uploadsAssemblies = _this$getPluginState3.uploadsAssemblies;\n    this.setPluginState({\n      uploadsAssemblies: _extends({}, uploadsAssemblies, (_extends7 = {}, _extends7[uploadID] = [], _extends7))\n    });\n    var files = fileIDs.map(function (id) {\n      return _this12.uppy.getFile(id);\n    });\n    var assemblyOptions = new AssemblyOptions(files, this.opts);\n    return assemblyOptions.build().then(function (assemblies) {\n      return Promise.all(assemblies.map(createAssembly)).then(function (createdAssemblies) {\n        var assemblyIDs = createdAssemblies.map(function (assembly) {\n          return assembly.status.assembly_id;\n        });\n        _this12._createAssemblyWatcher(assemblyIDs, fileIDs, uploadID);\n        createdAssemblies.map(function (assembly) {\n          return _this12._connectAssembly(assembly);\n        });\n      });\n    },\n    // If something went wrong before any Assemblies could be created,\n    // clear all processing state.\n    function (err) {\n      fileIDs.forEach(function (fileID) {\n        var file = _this12.uppy.getFile(fileID);\n        _this12.uppy.emit('preprocess-complete', file);\n        _this12.uppy.emit('upload-error', file, err);\n      });\n      throw err;\n    });\n  };\n  _proto._afterUpload = function _afterUpload(fileIDs, uploadID) {\n    var _this13 = this;\n    var files = fileIDs.map(function (fileID) {\n      return _this13.uppy.getFile(fileID);\n    }); // Only use files without errors\n\n    fileIDs = files.filter(function (file) {\n      return !file.error;\n    }).map(function (file) {\n      return file.id;\n    });\n    var state = this.getPluginState(); // If we're still restoring state, wait for that to be done.\n\n    if (this.restored) {\n      return this.restored.then(function () {\n        return _this13._afterUpload(fileIDs, uploadID);\n      });\n    }\n    var assemblyIDs = state.uploadsAssemblies[uploadID];\n    var closeSocketConnections = function closeSocketConnections() {\n      assemblyIDs.forEach(function (assemblyID) {\n        var assembly = _this13.activeAssemblies[assemblyID];\n        assembly.close();\n        delete _this13.activeAssemblies[assemblyID];\n      });\n    }; // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n\n    if (!this._shouldWaitAfterUpload()) {\n      closeSocketConnections();\n      var assemblies = assemblyIDs.map(function (id) {\n        return _this13.getAssembly(id);\n      });\n      this.uppy.addResultData(uploadID, {\n        transloadit: assemblies\n      });\n      return Promise.resolve();\n    } // If no Assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n\n    if (assemblyIDs.length === 0) {\n      this.uppy.addResultData(uploadID, {\n        transloadit: []\n      });\n      return Promise.resolve();\n    }\n    var incompleteFiles = files.filter(function (file) {\n      return !hasProperty(_this13.completedFiles, file.id);\n    });\n    incompleteFiles.forEach(function (file) {\n      _this13.uppy.emit('postprocess-progress', file, {\n        mode: 'indeterminate',\n        message: _this13.i18n('encoding')\n      });\n    });\n    var watcher = this.assemblyWatchers[uploadID];\n    return watcher.promise.then(function () {\n      closeSocketConnections();\n      var assemblies = assemblyIDs.map(function (id) {\n        return _this13.getAssembly(id);\n      }); // Remove the Assembly ID list for this upload,\n      // it's no longer going to be used anywhere.\n\n      var state = _this13.getPluginState();\n      var uploadsAssemblies = _extends({}, state.uploadsAssemblies);\n      delete uploadsAssemblies[uploadID];\n      _this13.setPluginState({\n        uploadsAssemblies: uploadsAssemblies\n      });\n      _this13.uppy.addResultData(uploadID, {\n        transloadit: assemblies\n      });\n    });\n  };\n  _proto._onError = function _onError(err, uploadID) {\n    var _this14 = this;\n    if (err === void 0) {\n      err = null;\n    }\n    var state = this.getPluginState();\n    var assemblyIDs = state.uploadsAssemblies[uploadID];\n    assemblyIDs.forEach(function (assemblyID) {\n      if (_this14.activeAssemblies[assemblyID]) {\n        _this14.activeAssemblies[assemblyID].close();\n      }\n    });\n  };\n  _proto._onTusError = function _onTusError(err) {\n    if (err && /^tus: /.test(err.message)) {\n      var xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null;\n      var url = xhr && xhr.responseURL ? xhr.responseURL : null;\n      this.client.submitError(err, {\n        url: url,\n        type: 'TUS_ERROR'\n      }).then(function (_) {// if we can't report the error that sucks\n      });\n    }\n  };\n  _proto.install = function install() {\n    this.uppy.addPreProcessor(this._prepareUpload);\n    this.uppy.addPostProcessor(this._afterUpload); // We may need to close socket.io connections on error.\n\n    this.uppy.on('error', this._onError); // Handle cancellation.\n\n    this.uppy.on('cancel-all', this._onCancelAll); // For error reporting.\n\n    this.uppy.on('upload-error', this._onTusError);\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this._onFileUploadURLAvailable);\n    } else {\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to an outdated Assembly, and we won't get socket events for it.\n        //\n        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's\n        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,\n        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that\n        // were added to the Assembly, so we can properly complete it. All that state is handled by\n        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,\n        // and we disable Tus's default resume implementation to prevent bad behaviours.\n        storeFingerprintForResuming: false,\n        resume: false,\n        // Disable Companion's retry optimisation; we need to change the endpoint on retry\n        // so it can't just reuse the same tus.Upload instance server-side.\n        useFastRemoteRetry: false,\n        // Only send Assembly metadata to the tus endpoint.\n        metaFields: ['assembly_url', 'filename', 'fieldname'],\n        // Pass the limit option to @uppy/tus\n        limit: this.opts.limit\n      });\n    }\n    this.uppy.on('restore:get-data', this._getPersistentData);\n    this.uppy.on('restored', this._onRestored);\n    this.setPluginState({\n      // Contains Assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: []\n    }); // We cannot cancel individual files because Assemblies tend to contain many files.\n\n    var _this$uppy$getState = this.uppy.getState(),\n      capabilities = _this$uppy$getState.capabilities;\n    this.uppy.setState({\n      capabilities: _extends({}, capabilities, {\n        individualCancellation: false\n      })\n    });\n  };\n  _proto.uninstall = function uninstall() {\n    this.uppy.removePreProcessor(this._prepareUpload);\n    this.uppy.removePostProcessor(this._afterUpload);\n    this.uppy.off('error', this._onError);\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this._onFileUploadURLAvailable);\n    }\n    var _this$uppy$getState2 = this.uppy.getState(),\n      capabilities = _this$uppy$getState2.capabilities;\n    this.uppy.setState({\n      capabilities: _extends({}, capabilities, {\n        individualCancellation: true\n      })\n    });\n  };\n  _proto.getAssembly = function getAssembly(id) {\n    var _this$getPluginState4 = this.getPluginState(),\n      assemblies = _this$getPluginState4.assemblies;\n    return assemblies[id];\n  };\n  _proto.getAssemblyFiles = function getAssemblyFiles(assemblyID) {\n    return this.uppy.getFiles().filter(function (file) {\n      return file && file.transloadit && file.transloadit.assembly === assemblyID;\n    });\n  };\n  return Transloadit;\n}(Plugin), _class.VERSION = \"1.7.0\", _temp);\nmodule.exports.COMPANION = COMPANION;\nmodule.exports.UPPY_SERVER = COMPANION;\nmodule.exports.COMPANION_PATTERN = ALLOWED_COMPANION_PATTERN;","map":{"version":3,"names":["_class","_temp","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","Translator","require","hasProperty","_require","Plugin","Tus","Assembly","Client","AssemblyOptions","AssemblyWatcher","defaultGetAssemblyOptions","file","options","params","signature","fields","COMPANION","ALLOWED_COMPANION_PATTERN","TL_COMPANION","TL_UPPY_SERVER","module","exports","_Plugin","Transloadit","uppy","opts","_this","type","id","title","defaultLocale","strings","creatingAssembly","creatingAssemblyFailed","encoding","defaultOptions","service","errorReporting","waitForEncoding","waitForMetadata","alwaysRunAssembly","importFromUploadURLs","getAssemblyOptions","limit","i18nInit","_prepareUpload","bind","_afterUpload","_onError","_onTusError","_onCancelAll","_onFileUploadURLAvailable","_onRestored","_getPersistentData","hasCustomAssemblyOptions","validateParams","client","_getClientVersion","activeAssemblies","assemblyWatchers","completedFiles","_proto","setOptions","newOpts","translator","locale","i18n","translate","i18nArray","translateArray","setPluginState","_this2","list","VERSION","addPluginVersion","pluginName","versionName","plugin","getPlugin","push","join","_attachAssemblyMetadata","status","meta","assembly_url","filename","name","fieldname","tus","endpoint","tus_url","addRequestId","remote","test","companionUrl","err","Error","log","newHost","companion_url","replace","path","url","newFile","transloadit","assembly","assembly_id","_createAssembly","fileIDs","uploadID","_this3","createAssembly","expectedFiles","then","newAssembly","_extends2","_extends3","assemblyID","_this3$getPluginState","getPluginState","assemblies","uploadsAssemblies","concat","_this3$uppy$getState","getState","files","updatedFiles","forEach","getFile","setState","emit","catch","message","_createAssemblyWatcher","_this4","watcher","on","getAssemblyFiles","error","_shouldWaitAfterUpload","_reserveFiles","_this5","Promise","all","map","fileID","reserveFile","rawFile","_this6","_this$getPluginState","addFile","_findFile","uploadedFile","getFiles","uploadURL","tus_upload_url","uploadUrl","is_tus_file","size","_onFileUploadComplete","assemblyId","_extends4","state","getAssembly","_onResult","stepName","result","original_id","localId","entry","results","_onAssemblyFinished","_this7","assembly_ssl_url","getAssemblyStatus","finalStatus","_extends5","_cancelAssembly","_this8","cancelAssembly","_this9","_this$getPluginState2","assemblyIDs","keys","reduce","acc","cancelPromises","setData","_setData","pluginData","_this10","savedState","previousAssemblies","restoreState","uploads","restoreAssemblies","_this10$getPluginStat","fileIDsInUpload","fileIDsInAssembly","allAssemblyIDs","_connectAssembly","updateAssemblies","_this10$getPluginStat2","update","restored","resolve","_this11","newStatus","_extends6","_this11$getPluginStat","ok","connected","reject","once","connect","_this12","_extends7","filter","mode","_ref","createdAssembly","_this$getPluginState3","assemblyOptions","build","createdAssemblies","_this13","closeSocketConnections","close","addResultData","incompleteFiles","promise","_this14","xhr","originalRequest","getUnderlyingObject","responseURL","submitError","_","install","addPreProcessor","addPostProcessor","use","storeFingerprintForResuming","resume","useFastRemoteRetry","metaFields","_this$uppy$getState","capabilities","individualCancellation","uninstall","removePreProcessor","removePostProcessor","off","_this$uppy$getState2","_this$getPluginState4","UPPY_SERVER","COMPANION_PATTERN"],"sources":["E:/integrate cloud/uppy/node_modules/@uppy/transloadit/lib/index.js"],"sourcesContent":["var _class, _temp;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar hasProperty = require('@uppy/utils/lib/hasProperty');\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar Tus = require('@uppy/tus');\n\nvar Assembly = require('./Assembly');\n\nvar Client = require('./Client');\n\nvar AssemblyOptions = require('./AssemblyOptions');\n\nvar AssemblyWatcher = require('./AssemblyWatcher');\n\nfunction defaultGetAssemblyOptions(file, options) {\n  return {\n    params: options.params,\n    signature: options.signature,\n    fields: options.fields\n  };\n}\n\nvar COMPANION = 'https://api2.transloadit.com/companion'; // Regex matching acceptable postMessage() origins for authentication feedback from companion.\n\nvar ALLOWED_COMPANION_PATTERN = /\\.transloadit\\.com$/; // Regex used to check if a Companion address is run by Transloadit.\n\nvar TL_COMPANION = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/companion/;\nvar TL_UPPY_SERVER = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/uppy-server/;\n/**\n * Upload files to Transloadit using Tus.\n */\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(Transloadit, _Plugin);\n\n  function Transloadit(uppy, opts) {\n    var _this;\n\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.type = 'uploader';\n    _this.id = _this.opts.id || 'Transloadit';\n    _this.title = 'Transloadit';\n    _this.defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create Assembly',\n        encoding: 'Encoding...'\n      }\n    };\n    var defaultOptions = {\n      service: 'https://api2.transloadit.com',\n      errorReporting: true,\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false,\n      importFromUploadURLs: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions: defaultGetAssemblyOptions,\n      limit: 0\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n\n    _this.i18nInit();\n\n    _this._prepareUpload = _this._prepareUpload.bind(_assertThisInitialized(_this));\n    _this._afterUpload = _this._afterUpload.bind(_assertThisInitialized(_this));\n    _this._onError = _this._onError.bind(_assertThisInitialized(_this));\n    _this._onTusError = _this._onTusError.bind(_assertThisInitialized(_this));\n    _this._onCancelAll = _this._onCancelAll.bind(_assertThisInitialized(_this));\n    _this._onFileUploadURLAvailable = _this._onFileUploadURLAvailable.bind(_assertThisInitialized(_this));\n    _this._onRestored = _this._onRestored.bind(_assertThisInitialized(_this));\n    _this._getPersistentData = _this._getPersistentData.bind(_assertThisInitialized(_this));\n    var hasCustomAssemblyOptions = _this.opts.getAssemblyOptions !== defaultOptions.getAssemblyOptions;\n\n    if (_this.opts.params) {\n      AssemblyOptions.validateParams(_this.opts.params);\n    } else if (!hasCustomAssemblyOptions) {\n      // Throw the same error that we'd throw if the `params` returned from a\n      // `getAssemblyOptions()` function is null.\n      AssemblyOptions.validateParams(null);\n    }\n\n    _this.client = new Client({\n      service: _this.opts.service,\n      client: _this._getClientVersion(),\n      errorReporting: _this.opts.errorReporting\n    }); // Contains Assembly instances for in-progress Assemblies.\n\n    _this.activeAssemblies = {}; // Contains a mapping of uploadID to AssemblyWatcher\n\n    _this.assemblyWatchers = {}; // Contains a file IDs that have completed postprocessing before the upload they belong to has entered the postprocess stage.\n\n    _this.completedFiles = Object.create(null);\n    return _this;\n  }\n\n  var _proto = Transloadit.prototype;\n\n  _proto.setOptions = function setOptions(newOpts) {\n    _Plugin.prototype.setOptions.call(this, newOpts);\n\n    this.i18nInit();\n  };\n\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = this.translator.translate.bind(this.translator);\n    this.i18nArray = this.translator.translateArray.bind(this.translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  };\n\n  _proto._getClientVersion = function _getClientVersion() {\n    var _this2 = this;\n\n    var list = [\"uppy-core:\" + this.uppy.constructor.VERSION, \"uppy-transloadit:\" + this.constructor.VERSION, \"uppy-tus:\" + Tus.VERSION];\n\n    var addPluginVersion = function addPluginVersion(pluginName, versionName) {\n      var plugin = _this2.uppy.getPlugin(pluginName);\n\n      if (plugin) {\n        list.push(versionName + \":\" + plugin.constructor.VERSION);\n      }\n    };\n\n    if (this.opts.importFromUploadURLs) {\n      addPluginVersion('XHRUpload', 'uppy-xhr-upload');\n      addPluginVersion('AwsS3', 'uppy-aws-s3');\n      addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart');\n    }\n\n    addPluginVersion('Dropbox', 'uppy-dropbox');\n    addPluginVersion('Box', 'uppy-box');\n    addPluginVersion('Facebook', 'uppy-facebook');\n    addPluginVersion('GoogleDrive', 'uppy-google-drive');\n    addPluginVersion('Instagram', 'uppy-instagram');\n    addPluginVersion('OneDrive', 'uppy-onedrive');\n    addPluginVersion('Zoom', 'uppy-zoom');\n    addPluginVersion('Url', 'uppy-url');\n    return list.join(',');\n  }\n  /**\n   * Attach metadata to files to configure the Tus plugin to upload to Transloadit.\n   * Also use Transloadit's Companion\n   *\n   * See: https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n   *\n   * @param {object} file\n   * @param {object} status\n   */\n  ;\n\n  _proto._attachAssemblyMetadata = function _attachAssemblyMetadata(file, status) {\n    // Add the metadata parameters Transloadit needs.\n    var meta = _extends({}, file.meta, {\n      assembly_url: status.assembly_url,\n      filename: file.name,\n      fieldname: 'file'\n    }); // Add Assembly-specific Tus endpoint.\n\n\n    var tus = _extends({}, file.tus, {\n      endpoint: status.tus_url,\n      // Include X-Request-ID headers for better debugging.\n      addRequestId: true\n    }); // Set Companion location. We only add this, if 'file' has the attribute\n    // remote, because this is the criteria to identify remote files.\n    // We only replace the hostname for Transloadit's companions, so that\n    // people can also self-host them while still using Transloadit for encoding.\n\n\n    var remote = file.remote;\n\n    if (file.remote && TL_UPPY_SERVER.test(file.remote.companionUrl)) {\n      var err = new Error('The https://api2.transloadit.com/uppy-server endpoint was renamed to ' + 'https://api2.transloadit.com/companion, please update your `companionUrl` ' + 'options accordingly.'); // Explicitly log this error here because it is caught by the `createAssembly`\n      // Promise further along.\n      // That's fine, but createAssembly only shows the informer, we need something a\n      // little more noisy.\n\n      this.uppy.log(err);\n      throw err;\n    }\n\n    if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {\n      var newHost = status.companion_url.replace(/\\/$/, '');\n      var path = file.remote.url.replace(file.remote.companionUrl, '').replace(/^\\//, '');\n      remote = _extends({}, file.remote, {\n        companionUrl: newHost,\n        url: newHost + \"/\" + path\n      });\n    } // Store the Assembly ID this file is in on the file under the `transloadit` key.\n\n\n    var newFile = _extends({}, file, {\n      transloadit: {\n        assembly: status.assembly_id\n      }\n    }); // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n\n\n    if (!this.opts.importFromUploadURLs) {\n      _extends(newFile, {\n        meta: meta,\n        tus: tus,\n        remote: remote\n      });\n    }\n\n    return newFile;\n  };\n\n  _proto._createAssembly = function _createAssembly(fileIDs, uploadID, options) {\n    var _this3 = this;\n\n    this.uppy.log('[Transloadit] Create Assembly');\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature\n    }).then(function (newAssembly) {\n      var _extends2, _extends3;\n\n      var assembly = new Assembly(newAssembly);\n      var status = assembly.status;\n      var assemblyID = status.assembly_id;\n\n      var _this3$getPluginState = _this3.getPluginState(),\n          assemblies = _this3$getPluginState.assemblies,\n          uploadsAssemblies = _this3$getPluginState.uploadsAssemblies;\n\n      _this3.setPluginState({\n        // Store the Assembly status.\n        assemblies: _extends({}, assemblies, (_extends2 = {}, _extends2[assemblyID] = status, _extends2)),\n        // Store the list of Assemblies related to this upload.\n        uploadsAssemblies: _extends({}, uploadsAssemblies, (_extends3 = {}, _extends3[uploadID] = [].concat(uploadsAssemblies[uploadID], [assemblyID]), _extends3))\n      });\n\n      var _this3$uppy$getState = _this3.uppy.getState(),\n          files = _this3$uppy$getState.files;\n\n      var updatedFiles = {};\n      fileIDs.forEach(function (id) {\n        updatedFiles[id] = _this3._attachAssemblyMetadata(_this3.uppy.getFile(id), status);\n      });\n\n      _this3.uppy.setState({\n        files: _extends({}, files, updatedFiles)\n      });\n\n      _this3.uppy.emit('transloadit:assembly-created', status, fileIDs);\n\n      _this3.uppy.log(\"[Transloadit] Created Assembly \" + assemblyID);\n\n      return assembly;\n    }).catch(function (err) {\n      err.message = _this3.i18n('creatingAssemblyFailed') + \": \" + err.message; // Reject the promise.\n\n      throw err;\n    });\n  };\n\n  _proto._createAssemblyWatcher = function _createAssemblyWatcher(assemblyID, fileIDs, uploadID) {\n    var _this4 = this;\n\n    // AssemblyWatcher tracks completion states of all Assemblies in this upload.\n    var watcher = new AssemblyWatcher(this.uppy, assemblyID);\n    watcher.on('assembly-complete', function (id) {\n      var files = _this4.getAssemblyFiles(id);\n\n      files.forEach(function (file) {\n        _this4.completedFiles[file.id] = true;\n\n        _this4.uppy.emit('postprocess-complete', file);\n      });\n    });\n    watcher.on('assembly-error', function (id, error) {\n      // Clear postprocessing state for all our files.\n      var files = _this4.getAssemblyFiles(id);\n\n      files.forEach(function (file) {\n        // TODO Maybe make a postprocess-error event here?\n        _this4.uppy.emit('upload-error', file, error);\n\n        _this4.uppy.emit('postprocess-complete', file);\n      });\n    });\n    this.assemblyWatchers[uploadID] = watcher;\n  };\n\n  _proto._shouldWaitAfterUpload = function _shouldWaitAfterUpload() {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata;\n  }\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the Assembly.\n   */\n  ;\n\n  _proto._reserveFiles = function _reserveFiles(assembly, fileIDs) {\n    var _this5 = this;\n\n    return Promise.all(fileIDs.map(function (fileID) {\n      var file = _this5.uppy.getFile(fileID);\n\n      return _this5.client.reserveFile(assembly.status, file);\n    }));\n  }\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the Assembly\n   * once they have been fully uploaded.\n   */\n  ;\n\n  _proto._onFileUploadURLAvailable = function _onFileUploadURLAvailable(rawFile) {\n    var _this6 = this;\n\n    var file = this.uppy.getFile(rawFile.id);\n\n    if (!file || !file.transloadit || !file.transloadit.assembly) {\n      return;\n    }\n\n    var _this$getPluginState = this.getPluginState(),\n        assemblies = _this$getPluginState.assemblies;\n\n    var assembly = assemblies[file.transloadit.assembly];\n    this.client.addFile(assembly, file).catch(function (err) {\n      _this6.uppy.log(err);\n\n      _this6.uppy.emit('transloadit:import-error', assembly, file.id, err);\n    });\n  };\n\n  _proto._findFile = function _findFile(uploadedFile) {\n    var files = this.uppy.getFiles();\n\n    for (var i = 0; i < files.length; i++) {\n      var file = files[i]; // Completed file upload.\n\n      if (file.uploadURL === uploadedFile.tus_upload_url) {\n        return file;\n      } // In-progress file upload.\n\n\n      if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return file;\n      }\n\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (file.name === uploadedFile.name && file.size === uploadedFile.size) {\n          return file;\n        }\n      }\n    }\n  };\n\n  _proto._onFileUploadComplete = function _onFileUploadComplete(assemblyId, uploadedFile) {\n    var _extends4;\n\n    var state = this.getPluginState();\n\n    var file = this._findFile(uploadedFile);\n\n    if (!file) {\n      this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process');\n      return;\n    }\n\n    this.setPluginState({\n      files: _extends({}, state.files, (_extends4 = {}, _extends4[uploadedFile.id] = {\n        assembly: assemblyId,\n        id: file.id,\n        uploadedFile: uploadedFile\n      }, _extends4))\n    });\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId));\n  }\n  /**\n   * Callback when a new Assembly result comes in.\n   *\n   * @param {string} assemblyId\n   * @param {string} stepName\n   * @param {object} result\n   */\n  ;\n\n  _proto._onResult = function _onResult(assemblyId, stepName, result) {\n    var state = this.getPluginState();\n    var file = state.files[result.original_id]; // The `file` may not exist if an import robot was used instead of a file upload.\n\n    result.localId = file ? file.id : null;\n    var entry = {\n      result: result,\n      stepName: stepName,\n      id: result.id,\n      assembly: assemblyId\n    };\n    this.setPluginState({\n      results: [].concat(state.results, [entry])\n    });\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId));\n  }\n  /**\n   * When an Assembly has finished processing, get the final state\n   * and emit it.\n   *\n   * @param {object} status\n   */\n  ;\n\n  _proto._onAssemblyFinished = function _onAssemblyFinished(status) {\n    var _this7 = this;\n\n    var url = status.assembly_ssl_url;\n    this.client.getAssemblyStatus(url).then(function (finalStatus) {\n      var _extends5;\n\n      var assemblyId = finalStatus.assembly_id;\n\n      var state = _this7.getPluginState();\n\n      _this7.setPluginState({\n        assemblies: _extends({}, state.assemblies, (_extends5 = {}, _extends5[assemblyId] = finalStatus, _extends5))\n      });\n\n      _this7.uppy.emit('transloadit:complete', finalStatus);\n    });\n  };\n\n  _proto._cancelAssembly = function _cancelAssembly(assembly) {\n    var _this8 = this;\n\n    return this.client.cancelAssembly(assembly).then(function () {\n      // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly\n      _this8.uppy.emit('transloadit:assembly-cancelled', assembly);\n    });\n  }\n  /**\n   * When all files are removed, cancel in-progress Assemblies.\n   */\n  ;\n\n  _proto._onCancelAll = function _onCancelAll() {\n    var _this9 = this;\n\n    var _this$getPluginState2 = this.getPluginState(),\n        uploadsAssemblies = _this$getPluginState2.uploadsAssemblies;\n\n    var assemblyIDs = Object.keys(uploadsAssemblies).reduce(function (acc, uploadID) {\n      acc.push.apply(acc, uploadsAssemblies[uploadID]);\n      return acc;\n    }, []);\n    var cancelPromises = assemblyIDs.map(function (assemblyID) {\n      var assembly = _this9.getAssembly(assemblyID);\n\n      return _this9._cancelAssembly(assembly);\n    });\n    Promise.all(cancelPromises).catch(function (err) {\n      _this9.uppy.log(err);\n    });\n  }\n  /**\n   * Custom state serialization for the Golden Retriever plugin.\n   * It will pass this back to the `_onRestored` function.\n   *\n   * @param {Function} setData\n   */\n  ;\n\n  _proto._getPersistentData = function _getPersistentData(setData) {\n    var _setData;\n\n    var state = this.getPluginState();\n    var assemblies = state.assemblies;\n    var uploadsAssemblies = state.uploadsAssemblies;\n    setData((_setData = {}, _setData[this.id] = {\n      assemblies: assemblies,\n      uploadsAssemblies: uploadsAssemblies\n    }, _setData));\n  };\n\n  _proto._onRestored = function _onRestored(pluginData) {\n    var _this10 = this;\n\n    var savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {};\n    var previousAssemblies = savedState.assemblies || {};\n    var uploadsAssemblies = savedState.uploadsAssemblies || {};\n\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return;\n    } // Convert loaded Assembly statuses to a Transloadit plugin state object.\n\n\n    var restoreState = function restoreState(assemblies) {\n      var files = {};\n      var results = [];\n      Object.keys(assemblies).forEach(function (id) {\n        var status = assemblies[id];\n        status.uploads.forEach(function (uploadedFile) {\n          var file = _this10._findFile(uploadedFile);\n\n          files[uploadedFile.id] = {\n            id: file.id,\n            assembly: id,\n            uploadedFile: uploadedFile\n          };\n        });\n\n        var state = _this10.getPluginState();\n\n        Object.keys(status.results).forEach(function (stepName) {\n          status.results[stepName].forEach(function (result) {\n            var file = state.files[result.original_id];\n            result.localId = file ? file.id : null;\n            results.push({\n              id: result.id,\n              result: result,\n              stepName: stepName,\n              assembly: id\n            });\n          });\n        });\n      });\n\n      _this10.setPluginState({\n        assemblies: assemblies,\n        files: files,\n        results: results,\n        uploadsAssemblies: uploadsAssemblies\n      });\n    }; // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.\n\n\n    var restoreAssemblies = function restoreAssemblies() {\n      var _this10$getPluginStat = _this10.getPluginState(),\n          assemblies = _this10$getPluginStat.assemblies,\n          uploadsAssemblies = _this10$getPluginStat.uploadsAssemblies; // Set up the assembly watchers again for all the ongoing uploads.\n\n\n      Object.keys(uploadsAssemblies).forEach(function (uploadID) {\n        var assemblyIDs = uploadsAssemblies[uploadID];\n        var fileIDsInUpload = assemblyIDs.reduce(function (acc, assemblyID) {\n          var fileIDsInAssembly = _this10.getAssemblyFiles(assemblyID).map(function (file) {\n            return file.id;\n          });\n\n          acc.push.apply(acc, fileIDsInAssembly);\n          return acc;\n        }, []);\n\n        _this10._createAssemblyWatcher(assemblyIDs, fileIDsInUpload, uploadID);\n      });\n      var allAssemblyIDs = Object.keys(assemblies);\n      allAssemblyIDs.forEach(function (id) {\n        var assembly = new Assembly(assemblies[id]);\n\n        _this10._connectAssembly(assembly);\n      });\n    }; // Force-update all Assemblies to check for missed events.\n\n\n    var updateAssemblies = function updateAssemblies() {\n      var _this10$getPluginStat2 = _this10.getPluginState(),\n          assemblies = _this10$getPluginStat2.assemblies;\n\n      return Promise.all(Object.keys(assemblies).map(function (id) {\n        return _this10.activeAssemblies[id].update();\n      }));\n    }; // Restore all Assembly state.\n\n\n    this.restored = Promise.resolve().then(function () {\n      restoreState(previousAssemblies);\n      restoreAssemblies();\n      return updateAssemblies();\n    });\n    this.restored.then(function () {\n      _this10.restored = null;\n    });\n  };\n\n  _proto._connectAssembly = function _connectAssembly(assembly) {\n    var _this11 = this;\n\n    var status = assembly.status;\n    var id = status.assembly_id;\n    this.activeAssemblies[id] = assembly; // Sync local `assemblies` state\n\n    assembly.on('status', function (newStatus) {\n      var _extends6;\n\n      var _this11$getPluginStat = _this11.getPluginState(),\n          assemblies = _this11$getPluginStat.assemblies;\n\n      _this11.setPluginState({\n        assemblies: _extends({}, assemblies, (_extends6 = {}, _extends6[id] = newStatus, _extends6))\n      });\n    });\n    assembly.on('upload', function (file) {\n      _this11._onFileUploadComplete(id, file);\n    });\n    assembly.on('error', function (error) {\n      error.assembly = assembly.status;\n\n      _this11.uppy.emit('transloadit:assembly-error', assembly.status, error);\n    });\n    assembly.on('executing', function () {\n      _this11.uppy.emit('transloadit:assembly-executing', assembly.status);\n    });\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('result', function (stepName, result) {\n        _this11._onResult(id, stepName, result);\n      });\n    }\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('finished', function () {\n        _this11._onAssemblyFinished(assembly.status);\n      });\n    } else if (this.opts.waitForMetadata) {\n      assembly.on('metadata', function () {\n        _this11._onAssemblyFinished(assembly.status);\n      });\n    } // No need to connect to the socket if the Assembly has completed by now.\n\n\n    if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n      return assembly;\n    } // TODO Do we still need this for anything…?\n    // eslint-disable-next-line no-unused-vars\n\n\n    var connected = new Promise(function (resolve, reject) {\n      assembly.once('connect', resolve);\n      assembly.once('status', resolve);\n      assembly.once('error', reject);\n    }).then(function () {\n      _this11.uppy.log('[Transloadit] Socket is ready');\n    });\n    assembly.connect();\n    return assembly;\n  };\n\n  _proto._prepareUpload = function _prepareUpload(fileIDs, uploadID) {\n    var _this12 = this,\n        _extends7;\n\n    // Only use files without errors\n    fileIDs = fileIDs.filter(function (file) {\n      return !file.error;\n    });\n    fileIDs.forEach(function (fileID) {\n      var file = _this12.uppy.getFile(fileID);\n\n      _this12.uppy.emit('preprocess-progress', file, {\n        mode: 'indeterminate',\n        message: _this12.i18n('creatingAssembly')\n      });\n    });\n\n    var createAssembly = function createAssembly(_ref) {\n      var fileIDs = _ref.fileIDs,\n          options = _ref.options;\n      var createdAssembly;\n      return _this12._createAssembly(fileIDs, uploadID, options).then(function (assembly) {\n        createdAssembly = assembly;\n\n        if (_this12.opts.importFromUploadURLs) {\n          return _this12._reserveFiles(assembly, fileIDs);\n        }\n      }).then(function () {\n        fileIDs.forEach(function (fileID) {\n          var file = _this12.uppy.getFile(fileID);\n\n          _this12.uppy.emit('preprocess-complete', file);\n        });\n        return createdAssembly;\n      }).catch(function (err) {\n        fileIDs.forEach(function (fileID) {\n          var file = _this12.uppy.getFile(fileID); // Clear preprocessing state when the Assembly could not be created,\n          // otherwise the UI gets confused about the lingering progress keys\n\n\n          _this12.uppy.emit('preprocess-complete', file);\n\n          _this12.uppy.emit('upload-error', file, err);\n        });\n        throw err;\n      });\n    };\n\n    var _this$getPluginState3 = this.getPluginState(),\n        uploadsAssemblies = _this$getPluginState3.uploadsAssemblies;\n\n    this.setPluginState({\n      uploadsAssemblies: _extends({}, uploadsAssemblies, (_extends7 = {}, _extends7[uploadID] = [], _extends7))\n    });\n    var files = fileIDs.map(function (id) {\n      return _this12.uppy.getFile(id);\n    });\n    var assemblyOptions = new AssemblyOptions(files, this.opts);\n    return assemblyOptions.build().then(function (assemblies) {\n      return Promise.all(assemblies.map(createAssembly)).then(function (createdAssemblies) {\n        var assemblyIDs = createdAssemblies.map(function (assembly) {\n          return assembly.status.assembly_id;\n        });\n\n        _this12._createAssemblyWatcher(assemblyIDs, fileIDs, uploadID);\n\n        createdAssemblies.map(function (assembly) {\n          return _this12._connectAssembly(assembly);\n        });\n      });\n    }, // If something went wrong before any Assemblies could be created,\n    // clear all processing state.\n    function (err) {\n      fileIDs.forEach(function (fileID) {\n        var file = _this12.uppy.getFile(fileID);\n\n        _this12.uppy.emit('preprocess-complete', file);\n\n        _this12.uppy.emit('upload-error', file, err);\n      });\n      throw err;\n    });\n  };\n\n  _proto._afterUpload = function _afterUpload(fileIDs, uploadID) {\n    var _this13 = this;\n\n    var files = fileIDs.map(function (fileID) {\n      return _this13.uppy.getFile(fileID);\n    }); // Only use files without errors\n\n    fileIDs = files.filter(function (file) {\n      return !file.error;\n    }).map(function (file) {\n      return file.id;\n    });\n    var state = this.getPluginState(); // If we're still restoring state, wait for that to be done.\n\n    if (this.restored) {\n      return this.restored.then(function () {\n        return _this13._afterUpload(fileIDs, uploadID);\n      });\n    }\n\n    var assemblyIDs = state.uploadsAssemblies[uploadID];\n\n    var closeSocketConnections = function closeSocketConnections() {\n      assemblyIDs.forEach(function (assemblyID) {\n        var assembly = _this13.activeAssemblies[assemblyID];\n        assembly.close();\n        delete _this13.activeAssemblies[assemblyID];\n      });\n    }; // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n\n\n    if (!this._shouldWaitAfterUpload()) {\n      closeSocketConnections();\n      var assemblies = assemblyIDs.map(function (id) {\n        return _this13.getAssembly(id);\n      });\n      this.uppy.addResultData(uploadID, {\n        transloadit: assemblies\n      });\n      return Promise.resolve();\n    } // If no Assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n\n\n    if (assemblyIDs.length === 0) {\n      this.uppy.addResultData(uploadID, {\n        transloadit: []\n      });\n      return Promise.resolve();\n    }\n\n    var incompleteFiles = files.filter(function (file) {\n      return !hasProperty(_this13.completedFiles, file.id);\n    });\n    incompleteFiles.forEach(function (file) {\n      _this13.uppy.emit('postprocess-progress', file, {\n        mode: 'indeterminate',\n        message: _this13.i18n('encoding')\n      });\n    });\n    var watcher = this.assemblyWatchers[uploadID];\n    return watcher.promise.then(function () {\n      closeSocketConnections();\n      var assemblies = assemblyIDs.map(function (id) {\n        return _this13.getAssembly(id);\n      }); // Remove the Assembly ID list for this upload,\n      // it's no longer going to be used anywhere.\n\n      var state = _this13.getPluginState();\n\n      var uploadsAssemblies = _extends({}, state.uploadsAssemblies);\n\n      delete uploadsAssemblies[uploadID];\n\n      _this13.setPluginState({\n        uploadsAssemblies: uploadsAssemblies\n      });\n\n      _this13.uppy.addResultData(uploadID, {\n        transloadit: assemblies\n      });\n    });\n  };\n\n  _proto._onError = function _onError(err, uploadID) {\n    var _this14 = this;\n\n    if (err === void 0) {\n      err = null;\n    }\n\n    var state = this.getPluginState();\n    var assemblyIDs = state.uploadsAssemblies[uploadID];\n    assemblyIDs.forEach(function (assemblyID) {\n      if (_this14.activeAssemblies[assemblyID]) {\n        _this14.activeAssemblies[assemblyID].close();\n      }\n    });\n  };\n\n  _proto._onTusError = function _onTusError(err) {\n    if (err && /^tus: /.test(err.message)) {\n      var xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null;\n      var url = xhr && xhr.responseURL ? xhr.responseURL : null;\n      this.client.submitError(err, {\n        url: url,\n        type: 'TUS_ERROR'\n      }).then(function (_) {// if we can't report the error that sucks\n      });\n    }\n  };\n\n  _proto.install = function install() {\n    this.uppy.addPreProcessor(this._prepareUpload);\n    this.uppy.addPostProcessor(this._afterUpload); // We may need to close socket.io connections on error.\n\n    this.uppy.on('error', this._onError); // Handle cancellation.\n\n    this.uppy.on('cancel-all', this._onCancelAll); // For error reporting.\n\n    this.uppy.on('upload-error', this._onTusError);\n\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this._onFileUploadURLAvailable);\n    } else {\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to an outdated Assembly, and we won't get socket events for it.\n        //\n        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's\n        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,\n        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that\n        // were added to the Assembly, so we can properly complete it. All that state is handled by\n        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,\n        // and we disable Tus's default resume implementation to prevent bad behaviours.\n        storeFingerprintForResuming: false,\n        resume: false,\n        // Disable Companion's retry optimisation; we need to change the endpoint on retry\n        // so it can't just reuse the same tus.Upload instance server-side.\n        useFastRemoteRetry: false,\n        // Only send Assembly metadata to the tus endpoint.\n        metaFields: ['assembly_url', 'filename', 'fieldname'],\n        // Pass the limit option to @uppy/tus\n        limit: this.opts.limit\n      });\n    }\n\n    this.uppy.on('restore:get-data', this._getPersistentData);\n    this.uppy.on('restored', this._onRestored);\n    this.setPluginState({\n      // Contains Assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: []\n    }); // We cannot cancel individual files because Assemblies tend to contain many files.\n\n    var _this$uppy$getState = this.uppy.getState(),\n        capabilities = _this$uppy$getState.capabilities;\n\n    this.uppy.setState({\n      capabilities: _extends({}, capabilities, {\n        individualCancellation: false\n      })\n    });\n  };\n\n  _proto.uninstall = function uninstall() {\n    this.uppy.removePreProcessor(this._prepareUpload);\n    this.uppy.removePostProcessor(this._afterUpload);\n    this.uppy.off('error', this._onError);\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this._onFileUploadURLAvailable);\n    }\n\n    var _this$uppy$getState2 = this.uppy.getState(),\n        capabilities = _this$uppy$getState2.capabilities;\n\n    this.uppy.setState({\n      capabilities: _extends({}, capabilities, {\n        individualCancellation: true\n      })\n    });\n  };\n\n  _proto.getAssembly = function getAssembly(id) {\n    var _this$getPluginState4 = this.getPluginState(),\n        assemblies = _this$getPluginState4.assemblies;\n\n    return assemblies[id];\n  };\n\n  _proto.getAssemblyFiles = function getAssemblyFiles(assemblyID) {\n    return this.uppy.getFiles().filter(function (file) {\n      return file && file.transloadit && file.transloadit.assembly === assemblyID;\n    });\n  };\n\n  return Transloadit;\n}(Plugin), _class.VERSION = \"1.7.0\", _temp);\nmodule.exports.COMPANION = COMPANION;\nmodule.exports.UPPY_SERVER = COMPANION;\nmodule.exports.COMPANION_PATTERN = ALLOWED_COMPANION_PATTERN;"],"mappings":"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"},"metadata":{},"sourceType":"script"}