{"ast":null,"code":"var _class, _temp;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar _require = require('@uppy/core'),\n  Plugin = _require.Plugin;\nvar Translator = require('@uppy/utils/lib/Translator');\nvar StatusBarUI = require('./StatusBar');\nvar statusBarStates = require('./StatusBarStates');\nvar getSpeed = require('@uppy/utils/lib/getSpeed');\nvar getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\nvar getTextDirection = require('@uppy/utils/lib/getTextDirection');\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(StatusBar, _Plugin);\n  function StatusBar(uppy, opts) {\n    var _this;\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.startUpload = function () {\n      var _this$uppy$getState = _this.uppy.getState(),\n        recoveredState = _this$uppy$getState.recoveredState;\n      if (recoveredState) {\n        _this.uppy.emit('restore-confirmed');\n        return;\n      }\n      return _this.uppy.upload().catch(function () {// Error logged in Core\n      });\n    };\n    _this.id = _this.opts.id || 'StatusBar';\n    _this.title = 'StatusBar';\n    _this.type = 'progressindicator';\n    _this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }; // set default options\n\n    var defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.i18nInit();\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    _this.install = _this.install.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  var _proto = StatusBar.prototype;\n  _proto.setOptions = function setOptions(newOpts) {\n    _Plugin.prototype.setOptions.call(this, newOpts);\n    this.i18nInit();\n  };\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = this.translator.translate.bind(this.translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  };\n\n  _proto.getTotalSpeed = function getTotalSpeed(files) {\n    var totalSpeed = 0;\n    files.forEach(function (file) {\n      totalSpeed += getSpeed(file.progress);\n    });\n    return totalSpeed;\n  };\n  _proto.getTotalETA = function getTotalETA(files) {\n    var totalSpeed = this.getTotalSpeed(files);\n    if (totalSpeed === 0) {\n      return 0;\n    }\n    var totalBytesRemaining = files.reduce(function (total, file) {\n      return total + getBytesRemaining(file.progress);\n    }, 0);\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n  };\n  _proto.getUploadingState = function getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\n    if (isAllErrored) {\n      return statusBarStates.STATE_ERROR;\n    }\n    if (isAllComplete) {\n      return statusBarStates.STATE_COMPLETE;\n    }\n    if (recoveredState) {\n      return statusBarStates.STATE_WAITING;\n    }\n    var state = statusBarStates.STATE_WAITING;\n    var fileIDs = Object.keys(files);\n    for (var i = 0; i < fileIDs.length; i++) {\n      var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\n\n      if (progress.uploadStarted && !progress.uploadComplete) {\n        return statusBarStates.STATE_UPLOADING;\n      } // If files are being preprocessed AND postprocessed at this time, we show the\n      // preprocess state. If any files are being uploaded we show uploading.\n\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n        state = statusBarStates.STATE_PREPROCESSING;\n      } // If NO files are being preprocessed or uploaded right now, but some files are\n      // being postprocessed, show the postprocess state.\n\n      if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n        state = statusBarStates.STATE_POSTPROCESSING;\n      }\n    }\n    return state;\n  };\n  _proto.render = function render(state) {\n    var capabilities = state.capabilities,\n      files = state.files,\n      allowNewUpload = state.allowNewUpload,\n      totalProgress = state.totalProgress,\n      error = state.error,\n      recoveredState = state.recoveredState; // TODO: move this to Core, to share between Status Bar and Dashboard\n    // (and any other plugin that might need it, too)\n\n    var filesArray = Object.keys(files).map(function (file) {\n      return files[file];\n    });\n    var newFiles = filesArray.filter(function (file) {\n      return !file.progress.uploadStarted && !file.progress.preprocess && !file.progress.postprocess;\n    }); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    if (recoveredState) {\n      newFiles = filesArray;\n    }\n    var uploadStartedFiles = filesArray.filter(function (file) {\n      return file.progress.uploadStarted;\n    });\n    var pausedFiles = uploadStartedFiles.filter(function (file) {\n      return file.isPaused;\n    });\n    var completeFiles = filesArray.filter(function (file) {\n      return file.progress.uploadComplete;\n    });\n    var erroredFiles = filesArray.filter(function (file) {\n      return file.error;\n    });\n    var inProgressFiles = filesArray.filter(function (file) {\n      return !file.progress.uploadComplete && file.progress.uploadStarted;\n    });\n    var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {\n      return !file.isPaused;\n    });\n    var startedFiles = filesArray.filter(function (file) {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n    var processingFiles = filesArray.filter(function (file) {\n      return file.progress.preprocess || file.progress.postprocess;\n    });\n    var totalETA = this.getTotalETA(inProgressNotPausedFiles);\n    var totalSize = 0;\n    var totalUploadedSize = 0;\n    startedFiles.forEach(function (file) {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    var isUploadStarted = startedFiles.length > 0;\n    var isAllComplete = totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;\n    var isAllErrored = error && erroredFiles.length === filesArray.length;\n    var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length;\n    var isUploadInProgress = inProgressFiles.length > 0;\n    var resumableUploads = capabilities.resumableUploads || false;\n    var supportsUploadProgress = capabilities.uploadProgress !== false;\n    var isSomeGhost = filesArray.some(function (file) {\n      return file.isGhost;\n    });\n    return StatusBarUI({\n      error: error,\n      uploadState: this.getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload: allowNewUpload,\n      totalProgress: totalProgress,\n      totalSize: totalSize,\n      totalUploadedSize: totalUploadedSize,\n      isAllComplete: isAllComplete,\n      isAllPaused: isAllPaused,\n      isAllErrored: isAllErrored,\n      isUploadStarted: isUploadStarted,\n      isUploadInProgress: isUploadInProgress,\n      isSomeGhost: isSomeGhost,\n      recoveredState: recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFiles.length,\n      numUploads: startedFiles.length,\n      totalETA: totalETA,\n      files: files,\n      i18n: this.i18n,\n      pauseAll: this.uppy.pauseAll,\n      resumeAll: this.uppy.resumeAll,\n      retryAll: this.uppy.retryAll,\n      cancelAll: this.uppy.cancelAll,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads: resumableUploads,\n      supportsUploadProgress: supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  };\n  _proto.onMount = function onMount() {\n    // Set the text direction if the page has not defined one.\n    var element = this.el;\n    var direction = getTextDirection(element);\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  };\n  _proto.install = function install() {\n    var target = this.opts.target;\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n  _proto.uninstall = function uninstall() {\n    this.unmount();\n  };\n  return StatusBar;\n}(Plugin), _class.VERSION = \"1.9.6\", _temp);","map":{"version":3,"names":["_class","_temp","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_require","require","Plugin","Translator","StatusBarUI","statusBarStates","getSpeed","getBytesRemaining","getTextDirection","module","exports","_Plugin","StatusBar","uppy","opts","_this","startUpload","_this$uppy$getState","getState","recoveredState","emit","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","_proto","setOptions","newOpts","translator","locale","i18n","translate","setPluginState","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","getUploadingState","isAllErrored","isAllComplete","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","keys","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","capabilities","allowNewUpload","totalProgress","error","filesArray","map","newFiles","filter","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressFiles","inProgressNotPausedFiles","startedFiles","processingFiles","totalETA","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","isUploadStarted","isAllPaused","isUploadInProgress","resumableUploads","supportsUploadProgress","uploadProgress","isSomeGhost","some","isGhost","uploadState","numUploads","pauseAll","resumeAll","retryAll","cancelAll","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION"],"sources":["E:/integrate cloud/uppy/node_modules/@uppy/status-bar/lib/index.js"],"sourcesContent":["var _class, _temp;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar StatusBarUI = require('./StatusBar');\n\nvar statusBarStates = require('./StatusBarStates');\n\nvar getSpeed = require('@uppy/utils/lib/getSpeed');\n\nvar getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\n\nvar getTextDirection = require('@uppy/utils/lib/getTextDirection');\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(StatusBar, _Plugin);\n\n  function StatusBar(uppy, opts) {\n    var _this;\n\n    _this = _Plugin.call(this, uppy, opts) || this;\n\n    _this.startUpload = function () {\n      var _this$uppy$getState = _this.uppy.getState(),\n          recoveredState = _this$uppy$getState.recoveredState;\n\n      if (recoveredState) {\n        _this.uppy.emit('restore-confirmed');\n\n        return;\n      }\n\n      return _this.uppy.upload().catch(function () {// Error logged in Core\n      });\n    };\n\n    _this.id = _this.opts.id || 'StatusBar';\n    _this.title = 'StatusBar';\n    _this.type = 'progressindicator';\n    _this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }; // set default options\n\n    var defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n\n    _this.i18nInit();\n\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    _this.install = _this.install.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = StatusBar.prototype;\n\n  _proto.setOptions = function setOptions(newOpts) {\n    _Plugin.prototype.setOptions.call(this, newOpts);\n\n    this.i18nInit();\n  };\n\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = this.translator.translate.bind(this.translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  };\n\n  _proto.getTotalSpeed = function getTotalSpeed(files) {\n    var totalSpeed = 0;\n    files.forEach(function (file) {\n      totalSpeed += getSpeed(file.progress);\n    });\n    return totalSpeed;\n  };\n\n  _proto.getTotalETA = function getTotalETA(files) {\n    var totalSpeed = this.getTotalSpeed(files);\n\n    if (totalSpeed === 0) {\n      return 0;\n    }\n\n    var totalBytesRemaining = files.reduce(function (total, file) {\n      return total + getBytesRemaining(file.progress);\n    }, 0);\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n  };\n\n  _proto.getUploadingState = function getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\n    if (isAllErrored) {\n      return statusBarStates.STATE_ERROR;\n    }\n\n    if (isAllComplete) {\n      return statusBarStates.STATE_COMPLETE;\n    }\n\n    if (recoveredState) {\n      return statusBarStates.STATE_WAITING;\n    }\n\n    var state = statusBarStates.STATE_WAITING;\n    var fileIDs = Object.keys(files);\n\n    for (var i = 0; i < fileIDs.length; i++) {\n      var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\n\n      if (progress.uploadStarted && !progress.uploadComplete) {\n        return statusBarStates.STATE_UPLOADING;\n      } // If files are being preprocessed AND postprocessed at this time, we show the\n      // preprocess state. If any files are being uploaded we show uploading.\n\n\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n        state = statusBarStates.STATE_PREPROCESSING;\n      } // If NO files are being preprocessed or uploaded right now, but some files are\n      // being postprocessed, show the postprocess state.\n\n\n      if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n        state = statusBarStates.STATE_POSTPROCESSING;\n      }\n    }\n\n    return state;\n  };\n\n  _proto.render = function render(state) {\n    var capabilities = state.capabilities,\n        files = state.files,\n        allowNewUpload = state.allowNewUpload,\n        totalProgress = state.totalProgress,\n        error = state.error,\n        recoveredState = state.recoveredState; // TODO: move this to Core, to share between Status Bar and Dashboard\n    // (and any other plugin that might need it, too)\n\n    var filesArray = Object.keys(files).map(function (file) {\n      return files[file];\n    });\n    var newFiles = filesArray.filter(function (file) {\n      return !file.progress.uploadStarted && !file.progress.preprocess && !file.progress.postprocess;\n    }); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    if (recoveredState) {\n      newFiles = filesArray;\n    }\n\n    var uploadStartedFiles = filesArray.filter(function (file) {\n      return file.progress.uploadStarted;\n    });\n    var pausedFiles = uploadStartedFiles.filter(function (file) {\n      return file.isPaused;\n    });\n    var completeFiles = filesArray.filter(function (file) {\n      return file.progress.uploadComplete;\n    });\n    var erroredFiles = filesArray.filter(function (file) {\n      return file.error;\n    });\n    var inProgressFiles = filesArray.filter(function (file) {\n      return !file.progress.uploadComplete && file.progress.uploadStarted;\n    });\n    var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {\n      return !file.isPaused;\n    });\n    var startedFiles = filesArray.filter(function (file) {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n    var processingFiles = filesArray.filter(function (file) {\n      return file.progress.preprocess || file.progress.postprocess;\n    });\n    var totalETA = this.getTotalETA(inProgressNotPausedFiles);\n    var totalSize = 0;\n    var totalUploadedSize = 0;\n    startedFiles.forEach(function (file) {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    var isUploadStarted = startedFiles.length > 0;\n    var isAllComplete = totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;\n    var isAllErrored = error && erroredFiles.length === filesArray.length;\n    var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length;\n    var isUploadInProgress = inProgressFiles.length > 0;\n    var resumableUploads = capabilities.resumableUploads || false;\n    var supportsUploadProgress = capabilities.uploadProgress !== false;\n    var isSomeGhost = filesArray.some(function (file) {\n      return file.isGhost;\n    });\n    return StatusBarUI({\n      error: error,\n      uploadState: this.getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload: allowNewUpload,\n      totalProgress: totalProgress,\n      totalSize: totalSize,\n      totalUploadedSize: totalUploadedSize,\n      isAllComplete: isAllComplete,\n      isAllPaused: isAllPaused,\n      isAllErrored: isAllErrored,\n      isUploadStarted: isUploadStarted,\n      isUploadInProgress: isUploadInProgress,\n      isSomeGhost: isSomeGhost,\n      recoveredState: recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFiles.length,\n      numUploads: startedFiles.length,\n      totalETA: totalETA,\n      files: files,\n      i18n: this.i18n,\n      pauseAll: this.uppy.pauseAll,\n      resumeAll: this.uppy.resumeAll,\n      retryAll: this.uppy.retryAll,\n      cancelAll: this.uppy.cancelAll,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads: resumableUploads,\n      supportsUploadProgress: supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  };\n\n  _proto.onMount = function onMount() {\n    // Set the text direction if the page has not defined one.\n    var element = this.el;\n    var direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  };\n\n  _proto.install = function install() {\n    var target = this.opts.target;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n\n  _proto.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  return StatusBar;\n}(Plugin), _class.VERSION = \"1.9.6\", _temp);"],"mappings":"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"},"metadata":{},"sourceType":"script"}