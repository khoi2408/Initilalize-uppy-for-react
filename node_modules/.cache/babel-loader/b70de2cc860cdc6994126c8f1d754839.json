{"ast":null,"code":"module.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  // get the base64 data\n  var data = dataURI.split(',')[1]; // user may provide mime type, if not get it from data URI\n\n  var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0]; // default to plain/text if data URI has no mimeType\n\n  if (mimeType == null) {\n    mimeType = 'plain/text';\n  }\n  var binary = atob(data);\n  var array = [];\n  for (var i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n  var bytes;\n  try {\n    bytes = new Uint8Array(array); // eslint-disable-line compat/compat\n  } catch (err) {\n    return null;\n  } // Convert to a File?\n\n  if (toFile) {\n    return new File([bytes], opts.name || '', {\n      type: mimeType\n    });\n  }\n  return new Blob([bytes], {\n    type: mimeType\n  });\n};","map":{"version":3,"names":["module","exports","dataURItoBlob","dataURI","opts","toFile","data","split","mimeType","binary","atob","array","i","length","push","charCodeAt","bytes","Uint8Array","err","File","name","type","Blob"],"sources":["E:/integrate cloud/uppy/node_modules/@uppy/utils/lib/dataURItoBlob.js"],"sourcesContent":["module.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  // get the base64 data\n  var data = dataURI.split(',')[1]; // user may provide mime type, if not get it from data URI\n\n  var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0]; // default to plain/text if data URI has no mimeType\n\n  if (mimeType == null) {\n    mimeType = 'plain/text';\n  }\n\n  var binary = atob(data);\n  var array = [];\n\n  for (var i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n\n  var bytes;\n\n  try {\n    bytes = new Uint8Array(array); // eslint-disable-line compat/compat\n  } catch (err) {\n    return null;\n  } // Convert to a File?\n\n\n  if (toFile) {\n    return new File([bytes], opts.name || '', {\n      type: mimeType\n    });\n  }\n\n  return new Blob([bytes], {\n    type: mimeType\n  });\n};"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG,SAASC,aAAaA,CAACC,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAE;EAC7D;EACA,IAAIC,IAAI,GAAGH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAElC,IAAIC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ,IAAIL,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEnF,IAAIC,QAAQ,IAAI,IAAI,EAAE;IACpBA,QAAQ,GAAG,YAAY;EACzB;EAEA,IAAIC,MAAM,GAAGC,IAAI,CAACJ,IAAI,CAAC;EACvB,IAAIK,KAAK,GAAG,EAAE;EAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACtCD,KAAK,CAACG,IAAI,CAACL,MAAM,CAACM,UAAU,CAACH,CAAC,CAAC,CAAC;EAClC;EAEA,IAAII,KAAK;EAET,IAAI;IACFA,KAAK,GAAG,IAAIC,UAAU,CAACN,KAAK,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,OAAO,IAAI;EACb,CAAC,CAAC;;EAGF,IAAIb,MAAM,EAAE;IACV,OAAO,IAAIc,IAAI,CAAC,CAACH,KAAK,CAAC,EAAEZ,IAAI,CAACgB,IAAI,IAAI,EAAE,EAAE;MACxCC,IAAI,EAAEb;IACR,CAAC,CAAC;EACJ;EAEA,OAAO,IAAIc,IAAI,CAAC,CAACN,KAAK,CAAC,EAAE;IACvBK,IAAI,EAAEb;EACR,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}