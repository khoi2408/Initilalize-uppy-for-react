{"ast":null,"code":"/**\n * Truncates a string to the given number of chars (maxLength) by inserting '...' in the middle of that string.\n * Partially taken from https://stackoverflow.com/a/5723274/3192470.\n *\n * @param {string} string - string to be truncated\n * @param {number} maxLength - maximum size of the resulting string\n * @returns {string}\n */\nmodule.exports = function truncateString(string, maxLength) {\n  var separator = '...'; // Return original string if it's already shorter than maxLength\n\n  if (string.length <= maxLength) {\n    return string; // Return truncated substring without '...' if string can't be meaningfully truncated\n  }\n\n  if (maxLength <= separator.length) {\n    return string.substr(0, maxLength); // Return truncated string divided in half by '...'\n  }\n\n  var charsToShow = maxLength - separator.length;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return string.substr(0, frontChars) + separator + string.substr(string.length - backChars);\n};","map":{"version":3,"names":["module","exports","truncateString","string","maxLength","separator","length","substr","charsToShow","frontChars","Math","ceil","backChars","floor"],"sources":["E:/integrate cloud/uppy/node_modules/@uppy/utils/lib/truncateString.js"],"sourcesContent":["/**\n * Truncates a string to the given number of chars (maxLength) by inserting '...' in the middle of that string.\n * Partially taken from https://stackoverflow.com/a/5723274/3192470.\n *\n * @param {string} string - string to be truncated\n * @param {number} maxLength - maximum size of the resulting string\n * @returns {string}\n */\nmodule.exports = function truncateString(string, maxLength) {\n  var separator = '...'; // Return original string if it's already shorter than maxLength\n\n  if (string.length <= maxLength) {\n    return string; // Return truncated substring without '...' if string can't be meaningfully truncated\n  }\n\n  if (maxLength <= separator.length) {\n    return string.substr(0, maxLength); // Return truncated string divided in half by '...'\n  }\n\n  var charsToShow = maxLength - separator.length;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return string.substr(0, frontChars) + separator + string.substr(string.length - backChars);\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,MAAM,EAAEC,SAAS,EAAE;EAC1D,IAAIC,SAAS,GAAG,KAAK,CAAC,CAAC;;EAEvB,IAAIF,MAAM,CAACG,MAAM,IAAIF,SAAS,EAAE;IAC9B,OAAOD,MAAM,CAAC,CAAC;EACjB;;EAEA,IAAIC,SAAS,IAAIC,SAAS,CAACC,MAAM,EAAE;IACjC,OAAOH,MAAM,CAACI,MAAM,CAAC,CAAC,EAAEH,SAAS,CAAC,CAAC,CAAC;EACtC;;EAEA,IAAII,WAAW,GAAGJ,SAAS,GAAGC,SAAS,CAACC,MAAM;EAC9C,IAAIG,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACH,WAAW,GAAG,CAAC,CAAC;EAC3C,IAAII,SAAS,GAAGF,IAAI,CAACG,KAAK,CAACL,WAAW,GAAG,CAAC,CAAC;EAC3C,OAAOL,MAAM,CAACI,MAAM,CAAC,CAAC,EAAEE,UAAU,CAAC,GAAGJ,SAAS,GAAGF,MAAM,CAACI,MAAM,CAACJ,MAAM,CAACG,MAAM,GAAGM,SAAS,CAAC;AAC5F,CAAC"},"metadata":{},"sourceType":"script"}