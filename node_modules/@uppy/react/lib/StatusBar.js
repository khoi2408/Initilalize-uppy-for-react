function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var React = require('react');

var PropTypes = require('prop-types');

var StatusBarPlugin = require('@uppy/status-bar');

var uppyPropType = require('./propTypes').uppy;

var getHTMLProps = require('./getHTMLProps');

var h = React.createElement;
/**
 * React component that renders a status bar containing upload progress and speed,
 * processing progress and pause/resume/cancel controls.
 */

var StatusBar = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(StatusBar, _React$Component);

  function StatusBar(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.validProps = getHTMLProps(props);
    return _this;
  }

  var _proto = StatusBar.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.installPlugin();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.uppy !== this.props.uppy) {
      this.uninstallPlugin(prevProps);
      this.installPlugin();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.uninstallPlugin();
  };

  _proto.installPlugin = function installPlugin() {
    var uppy = this.props.uppy;

    var options = _extends({
      id: 'react:StatusBar'
    }, this.props, {
      target: this.container
    });

    delete options.uppy;
    uppy.use(StatusBarPlugin, options);
    this.plugin = uppy.getPlugin(options.id);
  };

  _proto.uninstallPlugin = function uninstallPlugin(props) {
    if (props === void 0) {
      props = this.props;
    }

    var _props = props,
        uppy = _props.uppy;
    uppy.removePlugin(this.plugin);
  };

  _proto.render = function render() {
    var _this2 = this;

    return h('div', _extends({
      ref: function ref(container) {
        _this2.container = container;
      }
    }, this.validProps));
  };

  return StatusBar;
}(React.Component);

StatusBar.propTypes = {
  uppy: uppyPropType,
  hideAfterFinish: PropTypes.bool,
  showProgressDetails: PropTypes.bool
};
StatusBar.defaultProps = {};
module.exports = StatusBar;